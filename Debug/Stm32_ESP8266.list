
Stm32_ESP8266.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f4  080040f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040fc  080040fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08004174  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08004174  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fd  00000000  00000000  00029a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020e93  00000000  00000000  0002c1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a078  00000000  00000000  0004d043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7ab7  00000000  00000000  000570bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011eb72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000217c  00000000  00000000  0011ebc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e80 	.word	0x08003e80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08003e80 	.word	0x08003e80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <stm_to_esp>:
uint8_t Esp_answered=0;

char pc_receive_bool= 0;


void stm_to_esp(uint8_t* command){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, command, strlen((char*)command), 100);
 80005cc:	6878      	ldr	r0, [r7, #4]
 80005ce:	f7ff fe1f 	bl	8000210 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	; 0x64
 80005d8:	6879      	ldr	r1, [r7, #4]
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <stm_to_esp+0x58>)
 80005dc:	f001 fef5 	bl	80023ca <HAL_UART_Transmit>
    while(1){
    	  if (Esp_answered==1){
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <stm_to_esp+0x5c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d1fb      	bne.n	80005e0 <stm_to_esp+0x1c>
    		HAL_UART_Transmit(&huart2, Buf, sizeof(Buf), 100);	//SEND RECEIVED DATA TO PC. YOU SHOULD SEE ANS=OK
 80005e8:	2364      	movs	r3, #100	; 0x64
 80005ea:	22c8      	movs	r2, #200	; 0xc8
 80005ec:	490d      	ldr	r1, [pc, #52]	; (8000624 <stm_to_esp+0x60>)
 80005ee:	480e      	ldr	r0, [pc, #56]	; (8000628 <stm_to_esp+0x64>)
 80005f0:	f001 feeb 	bl	80023ca <HAL_UART_Transmit>
    						  memset(Buf, 0, sizeof(Buf)); // Buffer reset
 80005f4:	22c8      	movs	r2, #200	; 0xc8
 80005f6:	2100      	movs	r1, #0
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <stm_to_esp+0x60>)
 80005fa:	f002 ff3f 	bl	800347c <memset>
    						  idx = 0;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <stm_to_esp+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    						  Esp_answered=0;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <stm_to_esp+0x5c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
    						  Esp_will_answer=0;
 800060a:	4b09      	ldr	r3, [pc, #36]	; (8000630 <stm_to_esp+0x6c>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
    		break;
 8000610:	bf00      	nop
    	  }
      }
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000008c 	.word	0x2000008c
 8000620:	200002b5 	.word	0x200002b5
 8000624:	2000011c 	.word	0x2000011c
 8000628:	200000d0 	.word	0x200000d0
 800062c:	200002ad 	.word	0x200002ad
 8000630:	200002b4 	.word	0x200002b4

08000634 <pc_to_web>:


void pc_to_web (void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
			dhtval[0] = atoi(Buf_pc);
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <pc_to_web+0x28>)
 800063a:	f002 fef1 	bl	8003420 <atoi>
 800063e:	4603      	mov	r3, r0
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b07      	ldr	r3, [pc, #28]	; (8000660 <pc_to_web+0x2c>)
 8000644:	701a      	strb	r2, [r3, #0]
			// sending =Buf[0];
			memset(Buf_pc, 0, sizeof(Buf_pc)); // Buffer reset
 8000646:	22c8      	movs	r2, #200	; 0xc8
 8000648:	2100      	movs	r1, #0
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <pc_to_web+0x28>)
 800064c:	f002 ff16 	bl	800347c <memset>
				  idx_pc = 0;
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <pc_to_web+0x30>)
 8000652:	2200      	movs	r2, #0
 8000654:	701a      	strb	r2, [r3, #0]


}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	200001e4 	.word	0x200001e4
 8000660:	20000114 	.word	0x20000114
 8000664:	200002ae 	.word	0x200002ae

08000668 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) /// UART interrupt callback function
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)         // UART 1 interrupt receive
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <HAL_UART_RxCpltCallback+0x84>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d118      	bne.n	80006aa <HAL_UART_RxCpltCallback+0x42>
	{
			Buf[idx]=rxTemBuf[0];
 8000678:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <HAL_UART_RxCpltCallback+0x88>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	461a      	mov	r2, r3
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <HAL_UART_RxCpltCallback+0x8c>)
 8000680:	7819      	ldrb	r1, [r3, #0]
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <HAL_UART_RxCpltCallback+0x90>)
 8000684:	5499      	strb	r1, [r3, r2]
			idx++;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <HAL_UART_RxCpltCallback+0x88>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_UART_RxCpltCallback+0x88>)
 8000690:	701a      	strb	r2, [r3, #0]
			Holder=uwTick;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <HAL_UART_RxCpltCallback+0x94>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <HAL_UART_RxCpltCallback+0x98>)
 8000698:	6013      	str	r3, [r2, #0]
			Esp_will_answer = 1;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <HAL_UART_RxCpltCallback+0x9c>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart1, rxTemBuf, 1);   /// INTERRUPT CREATION
 80006a0:	2201      	movs	r2, #1
 80006a2:	4914      	ldr	r1, [pc, #80]	; (80006f4 <HAL_UART_RxCpltCallback+0x8c>)
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <HAL_UART_RxCpltCallback+0x84>)
 80006a6:	f001 ff22 	bl	80024ee <HAL_UART_Receive_IT>
	}

	if(huart == &huart2)    /// UART 2 interrupt receive
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a16      	ldr	r2, [pc, #88]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d118      	bne.n	80006e4 <HAL_UART_RxCpltCallback+0x7c>

	{
		Buf_pc[idx_pc]=rxTemBuf_pc[0];
 80006b2:	4b16      	ldr	r3, [pc, #88]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 80006ba:	7819      	ldrb	r1, [r3, #0]
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_UART_RxCpltCallback+0xac>)
 80006be:	5499      	strb	r1, [r3, r2]
		idx_pc++;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b10      	ldr	r3, [pc, #64]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 80006ca:	701a      	strb	r2, [r3, #0]
		Holder=uwTick;
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <HAL_UART_RxCpltCallback+0x94>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <HAL_UART_RxCpltCallback+0x98>)
 80006d2:	6013      	str	r3, [r2, #0]
		pc_receive_bool=1;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_UART_RxCpltCallback+0xb0>)
 80006d6:	2201      	movs	r2, #1
 80006d8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rxTemBuf_pc, 1);   /// INTERRUPT CREATION
 80006da:	2201      	movs	r2, #1
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 80006de:	480a      	ldr	r0, [pc, #40]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006e0:	f001 ff05 	bl	80024ee <HAL_UART_Receive_IT>
	}
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	2000008c 	.word	0x2000008c
 80006f0:	200002ad 	.word	0x200002ad
 80006f4:	20000118 	.word	0x20000118
 80006f8:	2000011c 	.word	0x2000011c
 80006fc:	200002bc 	.word	0x200002bc
 8000700:	200002b0 	.word	0x200002b0
 8000704:	200002b4 	.word	0x200002b4
 8000708:	200000d0 	.word	0x200000d0
 800070c:	200002ae 	.word	0x200002ae
 8000710:	200002ac 	.word	0x200002ac
 8000714:	200001e4 	.word	0x200001e4
 8000718:	200002b6 	.word	0x200002b6

0800071c <main>:


int main(void)
{
 800071c:	b5b0      	push	{r4, r5, r7, lr}
 800071e:	b0da      	sub	sp, #360	; 0x168
 8000720:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
uint8_t buffLen, buffLen2, buffCnt = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157

dhtval[0] = (uint8_t)0;
 8000728:	4bad      	ldr	r3, [pc, #692]	; (80009e0 <main+0x2c4>)
 800072a:	2200      	movs	r2, #0
 800072c:	701a      	strb	r2, [r3, #0]
dhtval[1] = (uint8_t)0;
 800072e:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <main+0x2c4>)
 8000730:	2200      	movs	r2, #0
 8000732:	705a      	strb	r2, [r3, #1]
char sendBuff[64], sendBuff2[64];
uint8_t AT[] = "AT\r\n"; //=\"RedmiNN\",\"12312312338\"\r\n";  // büyük AT  RN OLMADAN CEVAP VERMıyo
 8000734:	4aab      	ldr	r2, [pc, #684]	; (80009e4 <main+0x2c8>)
 8000736:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800073a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800073e:	6018      	str	r0, [r3, #0]
 8000740:	3304      	adds	r3, #4
 8000742:	7019      	strb	r1, [r3, #0]
uint8_t AT_RST[] = "AT+RST\r\n"; // AT+RST
 8000744:	4aa8      	ldr	r2, [pc, #672]	; (80009e8 <main+0x2cc>)
 8000746:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800074a:	ca07      	ldmia	r2, {r0, r1, r2}
 800074c:	c303      	stmia	r3!, {r0, r1}
 800074e:	701a      	strb	r2, [r3, #0]
uint8_t AT_GMR[] = "AT+GMR\r\n"; // AT+GMR
 8000750:	4aa6      	ldr	r2, [pc, #664]	; (80009ec <main+0x2d0>)
 8000752:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000756:	ca07      	ldmia	r2, {r0, r1, r2}
 8000758:	c303      	stmia	r3!, {r0, r1}
 800075a:	701a      	strb	r2, [r3, #0]
uint8_t AT_cwmode_sorgula[] = "AT+CWMODE?\r\n"; // AT+CWMODE
 800075c:	4ba4      	ldr	r3, [pc, #656]	; (80009f0 <main+0x2d4>)
 800075e:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	7023      	strb	r3, [r4, #0]
uint8_t AT_cwmode_station[] = "AT+CWMODE=1\r\n"; // STATION mode
 8000768:	4ba2      	ldr	r3, [pc, #648]	; (80009f4 <main+0x2d8>)
 800076a:	f107 0494 	add.w	r4, r7, #148	; 0x94
 800076e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000770:	c407      	stmia	r4!, {r0, r1, r2}
 8000772:	8023      	strh	r3, [r4, #0]
uint8_t AT_CWLAP_wifitara[] = "AT+CWLAP\r\n"; // wifi tara
 8000774:	4aa0      	ldr	r2, [pc, #640]	; (80009f8 <main+0x2dc>)
 8000776:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800077a:	ca07      	ldmia	r2, {r0, r1, r2}
 800077c:	c303      	stmia	r3!, {r0, r1}
 800077e:	801a      	strh	r2, [r3, #0]
 8000780:	3302      	adds	r3, #2
 8000782:	0c12      	lsrs	r2, r2, #16
 8000784:	701a      	strb	r2, [r3, #0]
uint8_t AT_CWJAP[] = "AT+CWJAP=\"RedmiNN\",\"12312312338\"\r\n"; // telefon ağına baglan
 8000786:	4b9d      	ldr	r3, [pc, #628]	; (80009fc <main+0x2e0>)
 8000788:	f107 0464 	add.w	r4, r7, #100	; 0x64
 800078c:	461d      	mov	r5, r3
 800078e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000796:	682b      	ldr	r3, [r5, #0]
 8000798:	461a      	mov	r2, r3
 800079a:	8022      	strh	r2, [r4, #0]
 800079c:	3402      	adds	r4, #2
 800079e:	0c1b      	lsrs	r3, r3, #16
 80007a0:	7023      	strb	r3, [r4, #0]
uint8_t AT_CIFSR[] = "AT+CIFSR\r\n"; // ip sorgulama (galiba station modda çalışmıyo AP modda çalışıyor olabilir)
 80007a2:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80007a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007aa:	4a95      	ldr	r2, [pc, #596]	; (8000a00 <main+0x2e4>)
 80007ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ae:	c303      	stmia	r3!, {r0, r1}
 80007b0:	801a      	strh	r2, [r3, #0]
 80007b2:	3302      	adds	r3, #2
 80007b4:	0c12      	lsrs	r2, r2, #16
 80007b6:	701a      	strb	r2, [r3, #0]
//uint8_t AT_flash_wifi[] = "AT+CWJAP_DEF=\"\""\r\n";  // hafızadaki wifi imiş
uint8_t AT_CWQAP[] = "AT+CWQAP\r\n"; // wifi bağlantısını kes
 80007b8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80007bc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007c0:	4a90      	ldr	r2, [pc, #576]	; (8000a04 <main+0x2e8>)
 80007c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c4:	c303      	stmia	r3!, {r0, r1}
 80007c6:	801a      	strh	r2, [r3, #0]
 80007c8:	3302      	adds	r3, #2
 80007ca:	0c12      	lsrs	r2, r2, #16
 80007cc:	701a      	strb	r2, [r3, #0]
uint8_t teto[]="teto\r\n";
 80007ce:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80007d2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80007d6:	4a8c      	ldr	r2, [pc, #560]	; (8000a08 <main+0x2ec>)
 80007d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007dc:	6018      	str	r0, [r3, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	8019      	strh	r1, [r3, #0]
 80007e2:	3302      	adds	r3, #2
 80007e4:	0c0a      	lsrs	r2, r1, #16
 80007e6:	701a      	strb	r2, [r3, #0]

uint8_t AT_Chip_start[] = "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n";
 80007e8:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80007ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80007f0:	4a86      	ldr	r2, [pc, #536]	; (8000a0c <main+0x2f0>)
 80007f2:	461c      	mov	r4, r3
 80007f4:	4615      	mov	r5, r2
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000802:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000806:	f000 fbc3 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */
  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 800080a:	f000 f917 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080e:	f000 f9d5 	bl	8000bbc <MX_GPIO_Init>
  /* Enable the GPIOA clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000816:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	4b7c      	ldr	r3, [pc, #496]	; (8000a10 <main+0x2f4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a7b      	ldr	r2, [pc, #492]	; (8000a10 <main+0x2f4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b79      	ldr	r3, [pc, #484]	; (8000a10 <main+0x2f4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0201 	and.w	r2, r3, #1
 8000832:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000836:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000840:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000844:	681b      	ldr	r3, [r3, #0]

  /* Configure the PA5 pin as output */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000846:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800084a:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800084e:	461a      	mov	r2, r3
 8000850:	2300      	movs	r3, #0
 8000852:	6013      	str	r3, [r2, #0]
 8000854:	6053      	str	r3, [r2, #4]
 8000856:	6093      	str	r3, [r2, #8]
 8000858:	60d3      	str	r3, [r2, #12]
 800085a:	6113      	str	r3, [r2, #16]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800085c:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000860:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000864:	2220      	movs	r2, #32
 8000866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 800086c:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000870:	2201      	movs	r2, #1
 8000872:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000878:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000884:	f5a3 73ae 	sub.w	r3, r3, #348	; 0x15c
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	4619      	mov	r1, r3
 8000890:	4860      	ldr	r0, [pc, #384]	; (8000a14 <main+0x2f8>)
 8000892:	f000 fdb7 	bl	8001404 <HAL_GPIO_Init>




  MX_USART2_UART_Init();
 8000896:	f000 f967 	bl	8000b68 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800089a:	f000 f93b 	bl	8000b14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_SYSTICK_Config(SystemCoreClock / 1000); //HAL_SYSTICK_Config(SystemCoreClock /  1000);
 800089e:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <main+0x2fc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a5e      	ldr	r2, [pc, #376]	; (8000a1c <main+0x300>)
 80008a4:	fba2 2303 	umull	r2, r3, r2, r3
 80008a8:	099b      	lsrs	r3, r3, #6
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fd0b 	bl	80012c6 <HAL_SYSTICK_Config>

  HAL_UART_Receive_IT(&huart1,rxTemBuf,1);
 80008b0:	2201      	movs	r2, #1
 80008b2:	495b      	ldr	r1, [pc, #364]	; (8000a20 <main+0x304>)
 80008b4:	485b      	ldr	r0, [pc, #364]	; (8000a24 <main+0x308>)
 80008b6:	f001 fe1a 	bl	80024ee <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, rxTemBuf_pc, 1);
 80008ba:	2201      	movs	r2, #1
 80008bc:	495a      	ldr	r1, [pc, #360]	; (8000a28 <main+0x30c>)
 80008be:	485b      	ldr	r0, [pc, #364]	; (8000a2c <main+0x310>)
 80008c0:	f001 fe15 	bl	80024ee <HAL_UART_Receive_IT>
///////////////////////////////////////////////////////////////////////////// ESP - CONFIG /////////////////////////
  //HAL_UART_Transmit(&huart1, AT_RST, sizeof(AT_RST), 100);  // ESP RESET
  //HAL_Delay(2000);
  //PC_transmit_answer();

  stm_to_esp(AT_CWQAP);
 80008c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe7b 	bl	80005c4 <stm_to_esp>
  //HAL_UART_Transmit(&huart1, AT_CWQAP, sizeof(AT_CWQAP), 100); /// to ESP
  stm_to_esp(AT_RST);
 80008ce:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe76 	bl	80005c4 <stm_to_esp>
  //HAL_UART_Transmit(&huart1, AT_CWJAP, sizeof(AT_CWJAP), 100); /// to ESP
  //HAL_Delay(3000);
  stm_to_esp(AT);
 80008d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe71 	bl	80005c4 <stm_to_esp>
  HAL_Delay(5000);
 80008e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80008e6:	f000 fbc5 	bl	8001074 <HAL_Delay>

  //HAL_UART_Transmit(&huart2, AT_Chip_start, sizeof(AT_Chip_start), 100);

  //PC_transmit_answer();

  char first_time =1; /// first time char
 80008ea:	2301      	movs	r3, #1
 80008ec:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
  char first_block_waiting=0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
  char skip_initial = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
  uint32_t hold_tick =0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  while (1)
  {
    /* USER CODE END WHILE */


	  if (abs((HAL_GetTick()-hold_tick >=20000)) || (first_time == 1) || (first_block_waiting ==1))
 8000902:	f000 fbab 	bl	800105c <HAL_GetTick>
 8000906:	4602      	mov	r2, r0
 8000908:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800090c:	1ad3      	subs	r3, r2, r3
 800090e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000912:	4293      	cmp	r3, r2
 8000914:	d807      	bhi.n	8000926 <main+0x20a>
 8000916:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800091a:	2b01      	cmp	r3, #1
 800091c:	d003      	beq.n	8000926 <main+0x20a>
 800091e:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8000922:	2b01      	cmp	r3, #1
 8000924:	d1ed      	bne.n	8000902 <main+0x1e6>
	  {
		  first_time=0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f



		  if (skip_initial ==0)  ///////////////////////////////////////////////// INITIAL BLOCK ////////////////////////////
 800092c:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 8000930:	2b00      	cmp	r3, #0
 8000932:	d112      	bne.n	800095a <main+0x23e>
		  {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000934:	2120      	movs	r1, #32
 8000936:	4837      	ldr	r0, [pc, #220]	; (8000a14 <main+0x2f8>)
 8000938:	f000 fef8 	bl	800172c <HAL_GPIO_TogglePin>


	  	  stm_to_esp(AT_Chip_start);
 800093c:	f107 0318 	add.w	r3, r7, #24
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fe3f 	bl	80005c4 <stm_to_esp>

	  	  first_block_waiting =1;
 8000946:	2301      	movs	r3, #1
 8000948:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
	  	  skip_initial =1;
 800094c:	2301      	movs	r3, #1
 800094e:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
	  	  hold_tick = HAL_GetTick();
 8000952:	f000 fb83 	bl	800105c <HAL_GetTick>
 8000956:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
		  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////




		  if (abs(HAL_GetTick()-hold_tick >=1000)) //////////////////// FIRST BLOCK /////////////////////////////////////
 800095a:	f000 fb7f 	bl	800105c <HAL_GetTick>
 800095e:	4602      	mov	r2, r0
 8000960:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800096a:	d3ca      	bcc.n	8000902 <main+0x1e6>
		  {

			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800096c:	2120      	movs	r1, #32
 800096e:	4829      	ldr	r0, [pc, #164]	; (8000a14 <main+0x2f8>)
 8000970:	f000 fedc 	bl	800172c <HAL_GPIO_TogglePin>



	  	  buffLen = sprintf(sendBuff, "GET /update?api_key=%s&field1=%d&field2=%d\r\n", API_KEY, dhtval[0], dhtval[1]);
 8000974:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <main+0x2c4>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <main+0x2c4>)
 800097c:	785b      	ldrb	r3, [r3, #1]
 800097e:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4613      	mov	r3, r2
 8000986:	4a2a      	ldr	r2, [pc, #168]	; (8000a30 <main+0x314>)
 8000988:	492a      	ldr	r1, [pc, #168]	; (8000a34 <main+0x318>)
 800098a:	f002 fd7f 	bl	800348c <siprintf>
 800098e:	4603      	mov	r3, r0
 8000990:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	  	  buffLen2 = sprintf(sendBuff2, "AT+CIPSEND=%d\r\n", buffLen);
 8000994:	f897 2156 	ldrb.w	r2, [r7, #342]	; 0x156
 8000998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800099c:	4926      	ldr	r1, [pc, #152]	; (8000a38 <main+0x31c>)
 800099e:	4618      	mov	r0, r3
 80009a0:	f002 fd74 	bl	800348c <siprintf>
 80009a4:	4603      	mov	r3, r0
 80009a6:	f887 3155 	strb.w	r3, [r7, #341]	; 0x155
	  	  stm_to_esp((uint8_t *)sendBuff2);
 80009aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe08 	bl	80005c4 <stm_to_esp>
	  	  stm_to_esp((uint8_t *)sendBuff);
 80009b4:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe03 	bl	80005c4 <stm_to_esp>


	  	  dhtval[1] += 1;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <main+0x2c4>)
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	3301      	adds	r3, #1
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <main+0x2c4>)
 80009c8:	705a      	strb	r2, [r3, #1]
	  	  // HAL_Delay(20000);




	  	  hold_tick = HAL_GetTick();
 80009ca:	f000 fb47 	bl	800105c <HAL_GetTick>
 80009ce:	f8c7 0158 	str.w	r0, [r7, #344]	; 0x158
	  	  first_block_waiting = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 315e 	strb.w	r3, [r7, #350]	; 0x15e
	  	  skip_initial =0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 315d 	strb.w	r3, [r7, #349]	; 0x15d
	  if (abs((HAL_GetTick()-hold_tick >=20000)) || (first_time == 1) || (first_block_waiting ==1))
 80009de:	e790      	b.n	8000902 <main+0x1e6>
 80009e0:	20000114 	.word	0x20000114
 80009e4:	08003ed8 	.word	0x08003ed8
 80009e8:	08003ee0 	.word	0x08003ee0
 80009ec:	08003eec 	.word	0x08003eec
 80009f0:	08003ef8 	.word	0x08003ef8
 80009f4:	08003f08 	.word	0x08003f08
 80009f8:	08003f18 	.word	0x08003f18
 80009fc:	08003f24 	.word	0x08003f24
 8000a00:	08003f48 	.word	0x08003f48
 8000a04:	08003f54 	.word	0x08003f54
 8000a08:	08003f60 	.word	0x08003f60
 8000a0c:	08003f68 	.word	0x08003f68
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020000 	.word	0x40020000
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	10624dd3 	.word	0x10624dd3
 8000a20:	20000118 	.word	0x20000118
 8000a24:	2000008c 	.word	0x2000008c
 8000a28:	200002ac 	.word	0x200002ac
 8000a2c:	200000d0 	.word	0x200000d0
 8000a30:	08003f94 	.word	0x08003f94
 8000a34:	08003e98 	.word	0x08003e98
 8000a38:	08003ec8 	.word	0x08003ec8

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	2234      	movs	r2, #52	; 0x34
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fd16 	bl	800347c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 0308 	add.w	r3, r7, #8
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	4b29      	ldr	r3, [pc, #164]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a28      	ldr	r2, [pc, #160]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b26      	ldr	r3, [pc, #152]	; (8000b0c <SystemClock_Config+0xd0>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <SystemClock_Config+0xd4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a88:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <SystemClock_Config+0xd4>)
 8000a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <SystemClock_Config+0xd4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ab4:	2332      	movs	r3, #50	; 0x32
 8000ab6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f993 	bl	8001df4 <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ad4:	f000 f8b6 	bl	8000c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2302      	movs	r3, #2
 8000ade:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aee:	f107 0308 	add.w	r3, r7, #8
 8000af2:	2101      	movs	r1, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fe33 	bl	8001760 <HAL_RCC_ClockConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000b00:	f000 f8a0 	bl	8000c44 <Error_Handler>
  }
}
 8000b04:	bf00      	nop
 8000b06:	3750      	adds	r7, #80	; 0x50
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40007000 	.word	0x40007000

08000b14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b18:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <MX_USART1_UART_Init+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_USART1_UART_Init+0x4c>)
 8000b4c:	f001 fbf0 	bl	8002330 <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b56:	f000 f875 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000008c 	.word	0x2000008c
 8000b64:	40011000 	.word	0x40011000

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <MX_USART2_UART_Init+0x50>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f001 fbc6 	bl	8002330 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000baa:	f000 f84b 	bl	8000c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200000d0 	.word	0x200000d0
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000bcc:	f043 0304 	orr.w	r3, r3, #4
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0304 	and.w	r3, r3, #4
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a16      	ldr	r2, [pc, #88]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_GPIO_Init+0x84>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

}
 8000c32:	bf00      	nop
 8000c34:	3714      	adds	r7, #20
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c48:	b672      	cpsid	i
}
 8000c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <Error_Handler+0x8>
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	607b      	str	r3, [r7, #4]
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	4a0f      	ldr	r2, [pc, #60]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6453      	str	r3, [r2, #68]	; 0x44
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c8e:	2007      	movs	r0, #7
 8000c90:	f000 fae4 	bl	800125c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08c      	sub	sp, #48	; 0x30
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a3a      	ldr	r2, [pc, #232]	; (8000da8 <HAL_UART_MspInit+0x108>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d135      	bne.n	8000d2e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	4b39      	ldr	r3, [pc, #228]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a38      	ldr	r2, [pc, #224]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b36      	ldr	r3, [pc, #216]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	4b32      	ldr	r3, [pc, #200]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a31      	ldr	r2, [pc, #196]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cfa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d0c:	2307      	movs	r3, #7
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4826      	ldr	r0, [pc, #152]	; (8000db0 <HAL_UART_MspInit+0x110>)
 8000d18:	f000 fb74 	bl	8001404 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2025      	movs	r0, #37	; 0x25
 8000d22:	f000 faa6 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d26:	2025      	movs	r0, #37	; 0x25
 8000d28:	f000 fabf 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d2c:	e038      	b.n	8000da0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a20      	ldr	r2, [pc, #128]	; (8000db4 <HAL_UART_MspInit+0x114>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d133      	bne.n	8000da0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a1a      	ldr	r2, [pc, #104]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a13      	ldr	r2, [pc, #76]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x10c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d70:	230c      	movs	r3, #12
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d80:	2307      	movs	r3, #7
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <HAL_UART_MspInit+0x110>)
 8000d8c:	f000 fb3a 	bl	8001404 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2100      	movs	r1, #0
 8000d94:	2026      	movs	r0, #38	; 0x26
 8000d96:	f000 fa6c 	bl	8001272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d9a:	2026      	movs	r0, #38	; 0x26
 8000d9c:	f000 fa85 	bl	80012aa <HAL_NVIC_EnableIRQ>
}
 8000da0:	bf00      	nop
 8000da2:	3730      	adds	r7, #48	; 0x30
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020000 	.word	0x40020000
 8000db4:	40004400 	.word	0x40004400

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <MemManage_Handler+0x4>

08000dca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <BusFault_Handler+0x4>

08000dd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <UsageFault_Handler+0x4>

08000dd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <SysTick_Handler>:
extern uint8_t Buf_pc[200];
extern char pc_receive_bool;
extern uint8_t Esp_answered;
extern uint8_t Esp_will_answer;

void SysTick_Handler(void)  {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000e04:	f000 f916 	bl	8001034 <HAL_IncTick>

	if (uwTick - Holder > 1 && pc_receive_bool && Buf_pc[0]!=0 && Buf_pc[1]!=0){
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <SysTick_Handler+0x68>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <SysTick_Handler+0x6c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d910      	bls.n	8000e38 <SysTick_Handler+0x38>
 8000e16:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <SysTick_Handler+0x70>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d00c      	beq.n	8000e38 <SysTick_Handler+0x38>
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SysTick_Handler+0x74>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d008      	beq.n	8000e38 <SysTick_Handler+0x38>
 8000e26:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <SysTick_Handler+0x74>)
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d004      	beq.n	8000e38 <SysTick_Handler+0x38>
				pc_to_web();
 8000e2e:	f7ff fc01 	bl	8000634 <pc_to_web>
				pc_receive_bool =0;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <SysTick_Handler+0x70>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
			}

	if (uwTick - Holder > 1 && Buf[0]!=0 && Buf[1]!=0 && Esp_will_answer ==1) {
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <SysTick_Handler+0x68>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <SysTick_Handler+0x6c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d90e      	bls.n	8000e64 <SysTick_Handler+0x64>
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <SysTick_Handler+0x78>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00a      	beq.n	8000e64 <SysTick_Handler+0x64>
 8000e4e:	4b0a      	ldr	r3, [pc, #40]	; (8000e78 <SysTick_Handler+0x78>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <SysTick_Handler+0x64>
 8000e56:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <SysTick_Handler+0x7c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d102      	bne.n	8000e64 <SysTick_Handler+0x64>
		//ESP_to_PC();
		Esp_answered =1;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <SysTick_Handler+0x80>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
	}




	}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200002bc 	.word	0x200002bc
 8000e6c:	200002b0 	.word	0x200002b0
 8000e70:	200002b6 	.word	0x200002b6
 8000e74:	200001e4 	.word	0x200001e4
 8000e78:	2000011c 	.word	0x2000011c
 8000e7c:	200002b4 	.word	0x200002b4
 8000e80:	200002b5 	.word	0x200002b5

08000e84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e88:	4802      	ldr	r0, [pc, #8]	; (8000e94 <USART1_IRQHandler+0x10>)
 8000e8a:	f001 fb61 	bl	8002550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2000008c 	.word	0x2000008c

08000e98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <USART2_IRQHandler+0x10>)
 8000e9e:	f001 fb57 	bl	8002550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200000d0 	.word	0x200000d0

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f002 faa4 	bl	8003428 <__errno>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20020000 	.word	0x20020000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	200002b8 	.word	0x200002b8
 8000f14:	200002d0 	.word	0x200002d0

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <SystemInit+0x20>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a05      	ldr	r2, [pc, #20]	; (8000f38 <SystemInit+0x20>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f42:	490e      	ldr	r1, [pc, #56]	; (8000f7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f48:	e002      	b.n	8000f50 <LoopCopyDataInit>

08000f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4e:	3304      	adds	r3, #4

08000f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f54:	d3f9      	bcc.n	8000f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f58:	4c0b      	ldr	r4, [pc, #44]	; (8000f88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f5c:	e001      	b.n	8000f62 <LoopFillZerobss>

08000f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f60:	3204      	adds	r2, #4

08000f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f64:	d3fb      	bcc.n	8000f5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f66:	f7ff ffd7 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f002 fa63 	bl	8003434 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fbd5 	bl	800071c <main>
  bx  lr    
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f7c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f80:	08004104 	.word	0x08004104
  ldr r2, =_sbss
 8000f84:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f88:	200002d0 	.word	0x200002d0

08000f8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_Init+0x40>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0a      	ldr	r2, [pc, #40]	; (8000fd0 <HAL_Init+0x40>)
 8000fa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <HAL_Init+0x40>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <HAL_Init+0x40>)
 8000fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb8:	2003      	movs	r0, #3
 8000fba:	f000 f94f 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 f808 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc4:	f7ff fe44 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023c00 	.word	0x40023c00

08000fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x54>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_InitTick+0x58>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f967 	bl	80012c6 <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f92f 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x5c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000000 	.word	0x20000000
 800102c:	20000008 	.word	0x20000008
 8001030:	20000004 	.word	0x20000004

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000008 	.word	0x20000008
 8001058:	200002bc 	.word	0x200002bc

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200002bc 	.word	0x200002bc

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008

080010bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <__NVIC_SetPriorityGrouping+0x44>)
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	60d3      	str	r3, [r2, #12]
}
 80010f4:	bf00      	nop
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <__NVIC_GetPriorityGrouping+0x18>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	0a1b      	lsrs	r3, r3, #8
 800110e:	f003 0307 	and.w	r3, r3, #7
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db0b      	blt.n	800114a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	f003 021f 	and.w	r2, r3, #31
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <__NVIC_EnableIRQ+0x38>)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	095b      	lsrs	r3, r3, #5
 8001140:	2001      	movs	r0, #1
 8001142:	fa00 f202 	lsl.w	r2, r0, r2
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff29 	bl	80010bc <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff3e 	bl	8001104 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff31 	bl	8001120 <__NVIC_EnableIRQ>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffa2 	bl	8001218 <SysTick_Config>
 80012d4:	4603      	mov	r3, r0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ec:	f7ff feb6 	bl	800105c <HAL_GetTick>
 80012f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d008      	beq.n	8001310 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e052      	b.n	80013b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0216 	bic.w	r2, r2, #22
 800131e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695a      	ldr	r2, [r3, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800132e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	d103      	bne.n	8001340 <HAL_DMA_Abort+0x62>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133c:	2b00      	cmp	r3, #0
 800133e:	d007      	beq.n	8001350 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0208 	bic.w	r2, r2, #8
 800134e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0201 	bic.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001360:	e013      	b.n	800138a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001362:	f7ff fe7b 	bl	800105c <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b05      	cmp	r3, #5
 800136e:	d90c      	bls.n	800138a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e015      	b.n	80013b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1e4      	bne.n	8001362 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800139c:	223f      	movs	r2, #63	; 0x3f
 800139e:	409a      	lsls	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013be:	b480      	push	{r7}
 80013c0:	b083      	sub	sp, #12
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d004      	beq.n	80013dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e00c      	b.n	80013f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2205      	movs	r2, #5
 80013e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e165      	b.n	80016ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	429a      	cmp	r2, r3
 800143a:	f040 8154 	bne.w	80016e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	2b01      	cmp	r3, #1
 8001448:	d005      	beq.n	8001456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001452:	2b02      	cmp	r3, #2
 8001454:	d130      	bne.n	80014b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4013      	ands	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	68da      	ldr	r2, [r3, #12]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69ba      	ldr	r2, [r7, #24]
 8001484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 0201 	and.w	r2, r3, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d017      	beq.n	80014f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	2203      	movs	r2, #3
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4013      	ands	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d123      	bne.n	8001548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	220f      	movs	r2, #15
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0307 	and.w	r3, r3, #7
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	69b9      	ldr	r1, [r7, #24]
 8001544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	2203      	movs	r2, #3
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80ae 	beq.w	80016e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	4b5d      	ldr	r3, [pc, #372]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a5c      	ldr	r2, [pc, #368]	; (8001704 <HAL_GPIO_Init+0x300>)
 8001594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001598:	6453      	str	r3, [r2, #68]	; 0x44
 800159a:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_GPIO_Init+0x300>)
 800159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_GPIO_Init+0x304>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_GPIO_Init+0x308>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d025      	beq.n	800161e <HAL_GPIO_Init+0x21a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <HAL_GPIO_Init+0x30c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d01f      	beq.n	800161a <HAL_GPIO_Init+0x216>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a4d      	ldr	r2, [pc, #308]	; (8001714 <HAL_GPIO_Init+0x310>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d019      	beq.n	8001616 <HAL_GPIO_Init+0x212>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_GPIO_Init+0x314>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d013      	beq.n	8001612 <HAL_GPIO_Init+0x20e>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a4b      	ldr	r2, [pc, #300]	; (800171c <HAL_GPIO_Init+0x318>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d00d      	beq.n	800160e <HAL_GPIO_Init+0x20a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <HAL_GPIO_Init+0x31c>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d007      	beq.n	800160a <HAL_GPIO_Init+0x206>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a49      	ldr	r2, [pc, #292]	; (8001724 <HAL_GPIO_Init+0x320>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d101      	bne.n	8001606 <HAL_GPIO_Init+0x202>
 8001602:	2306      	movs	r3, #6
 8001604:	e00c      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001606:	2307      	movs	r3, #7
 8001608:	e00a      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160a:	2305      	movs	r3, #5
 800160c:	e008      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800160e:	2304      	movs	r3, #4
 8001610:	e006      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001612:	2303      	movs	r3, #3
 8001614:	e004      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 8001616:	2302      	movs	r3, #2
 8001618:	e002      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_GPIO_Init+0x21c>
 800161e:	2300      	movs	r3, #0
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	f002 0203 	and.w	r2, r2, #3
 8001626:	0092      	lsls	r2, r2, #2
 8001628:	4093      	lsls	r3, r2
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4313      	orrs	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001630:	4935      	ldr	r1, [pc, #212]	; (8001708 <HAL_GPIO_Init+0x304>)
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	43db      	mvns	r3, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4013      	ands	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001662:	4a31      	ldr	r2, [pc, #196]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_GPIO_Init+0x324>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800168c:	4a26      	ldr	r2, [pc, #152]	; (8001728 <HAL_GPIO_Init+0x324>)
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_GPIO_Init+0x324>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <HAL_GPIO_Init+0x324>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3301      	adds	r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	2b0f      	cmp	r3, #15
 80016f0:	f67f ae96 	bls.w	8001420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40013800 	.word	0x40013800
 800170c:	40020000 	.word	0x40020000
 8001710:	40020400 	.word	0x40020400
 8001714:	40020800 	.word	0x40020800
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40021400 	.word	0x40021400
 8001724:	40021800 	.word	0x40021800
 8001728:	40013c00 	.word	0x40013c00

0800172c <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4013      	ands	r3, r2
 8001744:	041a      	lsls	r2, r3, #16
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43d9      	mvns	r1, r3
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	400b      	ands	r3, r1
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
}
 8001754:	bf00      	nop
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d101      	bne.n	8001774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0cc      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001774:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 030f 	and.w	r3, r3, #15
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d90c      	bls.n	800179c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001782:	4b65      	ldr	r3, [pc, #404]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178a:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0b8      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d005      	beq.n	80017c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b4:	4b59      	ldr	r3, [pc, #356]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a58      	ldr	r2, [pc, #352]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017cc:	4b53      	ldr	r3, [pc, #332]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a52      	ldr	r2, [pc, #328]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	494d      	ldr	r1, [pc, #308]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d044      	beq.n	8001880 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d107      	bne.n	800180e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d119      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e07f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d003      	beq.n	800181e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181a:	2b03      	cmp	r3, #3
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	4b3f      	ldr	r3, [pc, #252]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d109      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e067      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f023 0203 	bic.w	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	4934      	ldr	r1, [pc, #208]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	4313      	orrs	r3, r2
 800184e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001850:	f7ff fc04 	bl	800105c <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001856:	e00a      	b.n	800186e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001858:	f7ff fc00 	bl	800105c <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e04f      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f003 020c 	and.w	r2, r3, #12
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	429a      	cmp	r2, r3
 800187e:	d1eb      	bne.n	8001858 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001880:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	683a      	ldr	r2, [r7, #0]
 800188a:	429a      	cmp	r2, r3
 800188c:	d20c      	bcs.n	80018a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_RCC_ClockConfig+0x1b8>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e032      	b.n	800190e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4916      	ldr	r1, [pc, #88]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d009      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d2:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	490e      	ldr	r1, [pc, #56]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018e6:	f000 f855 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	490a      	ldr	r1, [pc, #40]	; (8001920 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	5ccb      	ldrb	r3, [r1, r3]
 80018fa:	fa22 f303 	lsr.w	r3, r2, r3
 80018fe:	4a09      	ldr	r2, [pc, #36]	; (8001924 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff fb64 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00
 800191c:	40023800 	.word	0x40023800
 8001920:	08003fa8 	.word	0x08003fa8
 8001924:	20000000 	.word	0x20000000
 8001928:	20000004 	.word	0x20000004

0800192c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_RCC_GetHCLKFreq+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001948:	f7ff fff0 	bl	800192c <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	0a9b      	lsrs	r3, r3, #10
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4903      	ldr	r1, [pc, #12]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	08003fb8 	.word	0x08003fb8

0800196c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001970:	f7ff ffdc 	bl	800192c <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	0b5b      	lsrs	r3, r3, #13
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	; (8001990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	08003fb8 	.word	0x08003fb8

08001994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001998:	b0ae      	sub	sp, #184	; 0xb8
 800199a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019ba:	4bcb      	ldr	r3, [pc, #812]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	f200 8206 	bhi.w	8001dd4 <HAL_RCC_GetSysClockFreq+0x440>
 80019c8:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ce:	bf00      	nop
 80019d0:	08001a05 	.word	0x08001a05
 80019d4:	08001dd5 	.word	0x08001dd5
 80019d8:	08001dd5 	.word	0x08001dd5
 80019dc:	08001dd5 	.word	0x08001dd5
 80019e0:	08001a0d 	.word	0x08001a0d
 80019e4:	08001dd5 	.word	0x08001dd5
 80019e8:	08001dd5 	.word	0x08001dd5
 80019ec:	08001dd5 	.word	0x08001dd5
 80019f0:	08001a15 	.word	0x08001a15
 80019f4:	08001dd5 	.word	0x08001dd5
 80019f8:	08001dd5 	.word	0x08001dd5
 80019fc:	08001dd5 	.word	0x08001dd5
 8001a00:	08001c05 	.word	0x08001c05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a04:	4bb9      	ldr	r3, [pc, #740]	; (8001cec <HAL_RCC_GetSysClockFreq+0x358>)
 8001a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001a0a:	e1e7      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a0c:	4bb8      	ldr	r3, [pc, #736]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a12:	e1e3      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a14:	4bb4      	ldr	r3, [pc, #720]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a20:	4bb1      	ldr	r3, [pc, #708]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d071      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2c:	4bae      	ldr	r3, [pc, #696]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a38:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001a52:	4622      	mov	r2, r4
 8001a54:	462b      	mov	r3, r5
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	0159      	lsls	r1, r3, #5
 8001a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a64:	0150      	lsls	r0, r2, #5
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1a51      	subs	r1, r2, r1
 8001a6e:	6439      	str	r1, [r7, #64]	; 0x40
 8001a70:	4629      	mov	r1, r5
 8001a72:	eb63 0301 	sbc.w	r3, r3, r1
 8001a76:	647b      	str	r3, [r7, #68]	; 0x44
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001a84:	4649      	mov	r1, r9
 8001a86:	018b      	lsls	r3, r1, #6
 8001a88:	4641      	mov	r1, r8
 8001a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8e:	4641      	mov	r1, r8
 8001a90:	018a      	lsls	r2, r1, #6
 8001a92:	4641      	mov	r1, r8
 8001a94:	1a51      	subs	r1, r2, r1
 8001a96:	63b9      	str	r1, [r7, #56]	; 0x38
 8001a98:	4649      	mov	r1, r9
 8001a9a:	eb63 0301 	sbc.w	r3, r3, r1
 8001a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001aac:	4649      	mov	r1, r9
 8001aae:	00cb      	lsls	r3, r1, #3
 8001ab0:	4641      	mov	r1, r8
 8001ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ab6:	4641      	mov	r1, r8
 8001ab8:	00ca      	lsls	r2, r1, #3
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4622      	mov	r2, r4
 8001ac2:	189b      	adds	r3, r3, r2
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	460a      	mov	r2, r1
 8001aca:	eb42 0303 	adc.w	r3, r2, r3
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001adc:	4629      	mov	r1, r5
 8001ade:	024b      	lsls	r3, r1, #9
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ae6:	4621      	mov	r1, r4
 8001ae8:	024a      	lsls	r2, r1, #9
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001af2:	2200      	movs	r2, #0
 8001af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001afc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001b00:	f7fe fbde 	bl	80002c0 <__aeabi_uldivmod>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4613      	mov	r3, r2
 8001b0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b0e:	e067      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b10:	4b75      	ldr	r3, [pc, #468]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	099b      	lsrs	r3, r3, #6
 8001b16:	2200      	movs	r2, #0
 8001b18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001b20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b28:	67bb      	str	r3, [r7, #120]	; 0x78
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001b2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0159      	lsls	r1, r3, #5
 8001b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b44:	0150      	lsls	r0, r2, #5
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	1a51      	subs	r1, r2, r1
 8001b4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb63 0301 	sbc.w	r3, r3, r1
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001b64:	4649      	mov	r1, r9
 8001b66:	018b      	lsls	r3, r1, #6
 8001b68:	4641      	mov	r1, r8
 8001b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6e:	4641      	mov	r1, r8
 8001b70:	018a      	lsls	r2, r1, #6
 8001b72:	4641      	mov	r1, r8
 8001b74:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b78:	4649      	mov	r1, r9
 8001b7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b92:	4692      	mov	sl, r2
 8001b94:	469b      	mov	fp, r3
 8001b96:	4623      	mov	r3, r4
 8001b98:	eb1a 0303 	adds.w	r3, sl, r3
 8001b9c:	623b      	str	r3, [r7, #32]
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	f04f 0200 	mov.w	r2, #0
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bb2:	4629      	mov	r1, r5
 8001bb4:	028b      	lsls	r3, r1, #10
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bbc:	4621      	mov	r1, r4
 8001bbe:	028a      	lsls	r2, r1, #10
 8001bc0:	4610      	mov	r0, r2
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bc8:	2200      	movs	r2, #0
 8001bca:	673b      	str	r3, [r7, #112]	; 0x70
 8001bcc:	677a      	str	r2, [r7, #116]	; 0x74
 8001bce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001bd2:	f7fe fb75 	bl	80002c0 <__aeabi_uldivmod>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4613      	mov	r3, r2
 8001bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001be0:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001bf2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001bf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c02:	e0eb      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c04:	4b38      	ldr	r3, [pc, #224]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c10:	4b35      	ldr	r3, [pc, #212]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d06b      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c1c:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	2200      	movs	r2, #0
 8001c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001c28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c2e:	663b      	str	r3, [r7, #96]	; 0x60
 8001c30:	2300      	movs	r3, #0
 8001c32:	667b      	str	r3, [r7, #100]	; 0x64
 8001c34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001c38:	4622      	mov	r2, r4
 8001c3a:	462b      	mov	r3, r5
 8001c3c:	f04f 0000 	mov.w	r0, #0
 8001c40:	f04f 0100 	mov.w	r1, #0
 8001c44:	0159      	lsls	r1, r3, #5
 8001c46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c4a:	0150      	lsls	r0, r2, #5
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4621      	mov	r1, r4
 8001c52:	1a51      	subs	r1, r2, r1
 8001c54:	61b9      	str	r1, [r7, #24]
 8001c56:	4629      	mov	r1, r5
 8001c58:	eb63 0301 	sbc.w	r3, r3, r1
 8001c5c:	61fb      	str	r3, [r7, #28]
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c6a:	4659      	mov	r1, fp
 8001c6c:	018b      	lsls	r3, r1, #6
 8001c6e:	4651      	mov	r1, sl
 8001c70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c74:	4651      	mov	r1, sl
 8001c76:	018a      	lsls	r2, r1, #6
 8001c78:	4651      	mov	r1, sl
 8001c7a:	ebb2 0801 	subs.w	r8, r2, r1
 8001c7e:	4659      	mov	r1, fp
 8001c80:	eb63 0901 	sbc.w	r9, r3, r1
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c98:	4690      	mov	r8, r2
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	eb18 0303 	adds.w	r3, r8, r3
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	eb49 0303 	adc.w	r3, r9, r3
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	024b      	lsls	r3, r1, #9
 8001cbc:	4621      	mov	r1, r4
 8001cbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	024a      	lsls	r2, r1, #9
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cce:	2200      	movs	r2, #0
 8001cd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8001cd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001cd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001cd8:	f7fe faf2 	bl	80002c0 <__aeabi_uldivmod>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ce6:	e065      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x420>
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	00f42400 	.word	0x00f42400
 8001cf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_RCC_GetSysClockFreq+0x458>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	4611      	mov	r1, r2
 8001d00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d04:	653b      	str	r3, [r7, #80]	; 0x50
 8001d06:	2300      	movs	r3, #0
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
 8001d0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001d0e:	4642      	mov	r2, r8
 8001d10:	464b      	mov	r3, r9
 8001d12:	f04f 0000 	mov.w	r0, #0
 8001d16:	f04f 0100 	mov.w	r1, #0
 8001d1a:	0159      	lsls	r1, r3, #5
 8001d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d20:	0150      	lsls	r0, r2, #5
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4641      	mov	r1, r8
 8001d28:	1a51      	subs	r1, r2, r1
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	4649      	mov	r1, r9
 8001d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d40:	4659      	mov	r1, fp
 8001d42:	018b      	lsls	r3, r1, #6
 8001d44:	4651      	mov	r1, sl
 8001d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d4a:	4651      	mov	r1, sl
 8001d4c:	018a      	lsls	r2, r1, #6
 8001d4e:	4651      	mov	r1, sl
 8001d50:	1a54      	subs	r4, r2, r1
 8001d52:	4659      	mov	r1, fp
 8001d54:	eb63 0501 	sbc.w	r5, r3, r1
 8001d58:	f04f 0200 	mov.w	r2, #0
 8001d5c:	f04f 0300 	mov.w	r3, #0
 8001d60:	00eb      	lsls	r3, r5, #3
 8001d62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d66:	00e2      	lsls	r2, r4, #3
 8001d68:	4614      	mov	r4, r2
 8001d6a:	461d      	mov	r5, r3
 8001d6c:	4643      	mov	r3, r8
 8001d6e:	18e3      	adds	r3, r4, r3
 8001d70:	603b      	str	r3, [r7, #0]
 8001d72:	464b      	mov	r3, r9
 8001d74:	eb45 0303 	adc.w	r3, r5, r3
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d86:	4629      	mov	r1, r5
 8001d88:	028b      	lsls	r3, r1, #10
 8001d8a:	4621      	mov	r1, r4
 8001d8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d90:	4621      	mov	r1, r4
 8001d92:	028a      	lsls	r2, r1, #10
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001da0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001da2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001da6:	f7fe fa8b 	bl	80002c0 <__aeabi_uldivmod>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4613      	mov	r3, r2
 8001db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001db4:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <HAL_RCC_GetSysClockFreq+0x458>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	0f1b      	lsrs	r3, r3, #28
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001dc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001dc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dd2:	e003      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001dda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ddc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	37b8      	adds	r7, #184	; 0xb8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400

08001df4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e28d      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 8083 	beq.w	8001f1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e14:	4b94      	ldr	r3, [pc, #592]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 030c 	and.w	r3, r3, #12
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d019      	beq.n	8001e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e20:	4b91      	ldr	r3, [pc, #580]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e28:	2b08      	cmp	r3, #8
 8001e2a:	d106      	bne.n	8001e3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e2c:	4b8e      	ldr	r3, [pc, #568]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e38:	d00c      	beq.n	8001e54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e3a:	4b8b      	ldr	r3, [pc, #556]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e42:	2b0c      	cmp	r3, #12
 8001e44:	d112      	bne.n	8001e6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e46:	4b88      	ldr	r3, [pc, #544]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e52:	d10b      	bne.n	8001e6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	4b84      	ldr	r3, [pc, #528]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d05b      	beq.n	8001f18 <HAL_RCC_OscConfig+0x124>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d157      	bne.n	8001f18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e25a      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d106      	bne.n	8001e84 <HAL_RCC_OscConfig+0x90>
 8001e76:	4b7c      	ldr	r3, [pc, #496]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a7b      	ldr	r2, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xcc>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xb4>
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a75      	ldr	r2, [pc, #468]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b73      	ldr	r3, [pc, #460]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a72      	ldr	r2, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xcc>
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6b      	ldr	r2, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f8c8 	bl	800105c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff f8c4 	bl	800105c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e21f      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b61      	ldr	r3, [pc, #388]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xdc>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f8b4 	bl	800105c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f8b0 	bl	800105c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e20b      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x104>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d06f      	beq.n	8002006 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d017      	beq.n	8001f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f32:	4b4d      	ldr	r3, [pc, #308]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00b      	beq.n	8001f62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d11c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f56:	4b44      	ldr	r3, [pc, #272]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x186>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d001      	beq.n	8001f7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e1d3      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	4937      	ldr	r1, [pc, #220]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	e03a      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d020      	beq.n	8001fda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f98:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_RCC_OscConfig+0x278>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f85d 	bl	800105c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f859 	bl	800105c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1b4      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc4:	4b28      	ldr	r3, [pc, #160]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4925      	ldr	r1, [pc, #148]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e015      	b.n	8002006 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x278>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff f83c 	bl	800105c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe8:	f7ff f838 	bl	800105c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e193      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d036      	beq.n	8002080 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x27c>)
 800201c:	2201      	movs	r2, #1
 800201e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002020:	f7ff f81c 	bl	800105c <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002028:	f7ff f818 	bl	800105c <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e173      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x274>)
 800203c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x234>
 8002046:	e01b      	b.n	8002080 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_OscConfig+0x27c>)
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff f805 	bl	800105c <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	e00e      	b.n	8002074 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f801 	bl	800105c <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d907      	bls.n	8002074 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e15c      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
 8002068:	40023800 	.word	0x40023800
 800206c:	42470000 	.word	0x42470000
 8002070:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b8a      	ldr	r3, [pc, #552]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1ea      	bne.n	8002056 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8097 	beq.w	80021bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b83      	ldr	r3, [pc, #524]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	4b7f      	ldr	r3, [pc, #508]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a7e      	ldr	r2, [pc, #504]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b7c      	ldr	r3, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b79      	ldr	r3, [pc, #484]	; (80022a4 <HAL_RCC_OscConfig+0x4b0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x4b0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a75      	ldr	r2, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4b0>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7fe ffc1 	bl	800105c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7fe ffbd 	bl	800105c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e118      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b6c      	ldr	r3, [pc, #432]	; (80022a4 <HAL_RCC_OscConfig+0x4b0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x31e>
 8002104:	4b66      	ldr	r3, [pc, #408]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	4a65      	ldr	r2, [pc, #404]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	; 0x70
 8002110:	e01c      	b.n	800214c <HAL_RCC_OscConfig+0x358>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x340>
 800211a:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a60      	ldr	r2, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6713      	str	r3, [r2, #112]	; 0x70
 8002126:	4b5e      	ldr	r3, [pc, #376]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212a:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6713      	str	r3, [r2, #112]	; 0x70
 8002132:	e00b      	b.n	800214c <HAL_RCC_OscConfig+0x358>
 8002134:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002138:	4a59      	ldr	r2, [pc, #356]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6713      	str	r3, [r2, #112]	; 0x70
 8002140:	4b57      	ldr	r3, [pc, #348]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	4a56      	ldr	r2, [pc, #344]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002146:	f023 0304 	bic.w	r3, r3, #4
 800214a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d015      	beq.n	8002180 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7fe ff82 	bl	800105c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7fe ff7e 	bl	800105c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	; 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e0d7      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002172:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0ee      	beq.n	800215c <HAL_RCC_OscConfig+0x368>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe ff6c 	bl	800105c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7fe ff68 	bl	800105c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	; 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0c1      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1ee      	bne.n	8002188 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021aa:	7dfb      	ldrb	r3, [r7, #23]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80021b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 80ad 	beq.w	8002320 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021c6:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d060      	beq.n	8002294 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d145      	bne.n	8002266 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b33      	ldr	r3, [pc, #204]	; (80022a8 <HAL_RCC_OscConfig+0x4b4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff3c 	bl	800105c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe ff38 	bl	800105c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e093      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69da      	ldr	r2, [r3, #28]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	019b      	lsls	r3, r3, #6
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	061b      	lsls	r3, r3, #24
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002230:	071b      	lsls	r3, r3, #28
 8002232:	491b      	ldr	r1, [pc, #108]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002234:	4313      	orrs	r3, r2
 8002236:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_RCC_OscConfig+0x4b4>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe ff0d 	bl	800105c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7fe ff09 	bl	800105c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e064      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002258:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x452>
 8002264:	e05c      	b.n	8002320 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b10      	ldr	r3, [pc, #64]	; (80022a8 <HAL_RCC_OscConfig+0x4b4>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fef6 	bl	800105c <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fef2 	bl	800105c <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04d      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x4ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x480>
 8002292:	e045      	b.n	8002320 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e040      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000
 80022a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_RCC_OscConfig+0x538>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d030      	beq.n	800231c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d129      	bne.n	800231c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d122      	bne.n	800231c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d119      	bne.n	800231c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10f      	bne.n	800231c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3718      	adds	r7, #24
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e03f      	b.n	80023c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7fe fca2 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2224      	movs	r2, #36	; 0x24
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fddf 	bl	8002f38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2220      	movs	r2, #32
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2220      	movs	r2, #32
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08a      	sub	sp, #40	; 0x28
 80023ce:	af02      	add	r7, sp, #8
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	603b      	str	r3, [r7, #0]
 80023d6:	4613      	mov	r3, r2
 80023d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d17c      	bne.n	80024e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_UART_Transmit+0x2c>
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e075      	b.n	80024e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002400:	2b01      	cmp	r3, #1
 8002402:	d101      	bne.n	8002408 <HAL_UART_Transmit+0x3e>
 8002404:	2302      	movs	r3, #2
 8002406:	e06e      	b.n	80024e6 <HAL_UART_Transmit+0x11c>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2221      	movs	r2, #33	; 0x21
 800241a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800241e:	f7fe fe1d 	bl	800105c <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	88fa      	ldrh	r2, [r7, #6]
 8002428:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	88fa      	ldrh	r2, [r7, #6]
 800242e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002438:	d108      	bne.n	800244c <HAL_UART_Transmit+0x82>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	61bb      	str	r3, [r7, #24]
 800244a:	e003      	b.n	8002454 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800245c:	e02a      	b.n	80024b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fb1f 	bl	8002aac <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e036      	b.n	80024e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10b      	bne.n	8002496 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	461a      	mov	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800248c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	3302      	adds	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
 8002494:	e007      	b.n	80024a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3301      	adds	r3, #1
 80024a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1cf      	bne.n	800245e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2140      	movs	r1, #64	; 0x40
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 faef 	bl	8002aac <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e006      	b.n	80024e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e000      	b.n	80024e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024e4:	2302      	movs	r3, #2
  }
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3720      	adds	r7, #32
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	4613      	mov	r3, r2
 80024fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b20      	cmp	r3, #32
 8002506:	d11d      	bne.n	8002544 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_UART_Receive_IT+0x26>
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d101      	bne.n	8002518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e016      	b.n	8002546 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_UART_Receive_IT+0x38>
 8002522:	2302      	movs	r3, #2
 8002524:	e00f      	b.n	8002546 <HAL_UART_Receive_IT+0x58>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	461a      	mov	r2, r3
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fb24 	bl	8002b88 <UART_Start_Receive_IT>
 8002540:	4603      	mov	r3, r0
 8002542:	e000      	b.n	8002546 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0ba      	sub	sp, #232	; 0xe8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800258e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <HAL_UART_IRQHandler+0x66>
 80025a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025a6:	f003 0320 	and.w	r3, r3, #32
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fc07 	bl	8002dc2 <UART_Receive_IT>
      return;
 80025b4:	e256      	b.n	8002a64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80025b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 80de 	beq.w	800277c <HAL_UART_IRQHandler+0x22c>
 80025c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d106      	bne.n	80025da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80d1 	beq.w	800277c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_UART_IRQHandler+0xae>
 80025e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f043 0201 	orr.w	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_UART_IRQHandler+0xd2>
 800260a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f043 0202 	orr.w	r2, r3, #2
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_UART_IRQHandler+0xf6>
 800262e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d005      	beq.n	8002646 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f043 0204 	orr.w	r2, r3, #4
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d011      	beq.n	8002676 <HAL_UART_IRQHandler+0x126>
 8002652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002656:	f003 0320 	and.w	r3, r3, #32
 800265a:	2b00      	cmp	r3, #0
 800265c:	d105      	bne.n	800266a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800265e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d005      	beq.n	8002676 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	f043 0208 	orr.w	r2, r3, #8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 81ed 	beq.w	8002a5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_UART_IRQHandler+0x14e>
 800268c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 fb92 	bl	8002dc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d103      	bne.n	80026ca <HAL_UART_IRQHandler+0x17a>
 80026c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d04f      	beq.n	800276a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa9a 	bl	8002c04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026da:	2b40      	cmp	r3, #64	; 0x40
 80026dc:	d141      	bne.n	8002762 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3314      	adds	r3, #20
 80026e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026ec:	e853 3f00 	ldrex	r3, [r3]
 80026f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3314      	adds	r3, #20
 8002706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800270a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800270e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800271a:	e841 2300 	strex	r3, r2, [r1]
 800271e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1d9      	bne.n	80026de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800272e:	2b00      	cmp	r3, #0
 8002730:	d013      	beq.n	800275a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002736:	4a7d      	ldr	r2, [pc, #500]	; (800292c <HAL_UART_IRQHandler+0x3dc>)
 8002738:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	4618      	mov	r0, r3
 8002740:	f7fe fe3d 	bl	80013be <HAL_DMA_Abort_IT>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002754:	4610      	mov	r0, r2
 8002756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002758:	e00e      	b.n	8002778 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f990 	bl	8002a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002760:	e00a      	b.n	8002778 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f98c 	bl	8002a80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002768:	e006      	b.n	8002778 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f988 	bl	8002a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002776:	e170      	b.n	8002a5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002778:	bf00      	nop
    return;
 800277a:	e16e      	b.n	8002a5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	2b01      	cmp	r3, #1
 8002782:	f040 814a 	bne.w	8002a1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8143 	beq.w	8002a1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	f000 813c 	beq.w	8002a1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027a2:	2300      	movs	r3, #0
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	60bb      	str	r3, [r7, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	2b40      	cmp	r3, #64	; 0x40
 80027c4:	f040 80b4 	bne.w	8002930 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8140 	beq.w	8002a5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80027e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027e6:	429a      	cmp	r2, r3
 80027e8:	f080 8139 	bcs.w	8002a5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fe:	f000 8088 	beq.w	8002912 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	330c      	adds	r3, #12
 8002808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800280c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002810:	e853 3f00 	ldrex	r3, [r3]
 8002814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800281c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002820:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	330c      	adds	r3, #12
 800282a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800282e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002832:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002836:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800283a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800283e:	e841 2300 	strex	r3, r2, [r1]
 8002842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1d9      	bne.n	8002802 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002858:	e853 3f00 	ldrex	r3, [r3]
 800285c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800285e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3314      	adds	r3, #20
 800286e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002872:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002876:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002878:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800287a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800287e:	e841 2300 	strex	r3, r2, [r1]
 8002882:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002884:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1e1      	bne.n	800284e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	3314      	adds	r3, #20
 8002890:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002894:	e853 3f00 	ldrex	r3, [r3]
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800289a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800289c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028b6:	e841 2300 	strex	r3, r2, [r1]
 80028ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1e3      	bne.n	800288a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2220      	movs	r2, #32
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	330c      	adds	r3, #12
 80028d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028da:	e853 3f00 	ldrex	r3, [r3]
 80028de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e2:	f023 0310 	bic.w	r3, r3, #16
 80028e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	330c      	adds	r3, #12
 80028f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80028f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80028f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028fc:	e841 2300 	strex	r3, r2, [r1]
 8002900:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1e3      	bne.n	80028d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fce6 	bl	80012de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800291a:	b29b      	uxth	r3, r3
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8b6 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002928:	e099      	b.n	8002a5e <HAL_UART_IRQHandler+0x50e>
 800292a:	bf00      	nop
 800292c:	08002ccb 	.word	0x08002ccb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002938:	b29b      	uxth	r3, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 808b 	beq.w	8002a62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800294c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8086 	beq.w	8002a62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002968:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800296c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800297a:	647a      	str	r2, [r7, #68]	; 0x44
 800297c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002982:	e841 2300 	strex	r3, r2, [r1]
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1e3      	bne.n	8002956 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3314      	adds	r3, #20
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	e853 3f00 	ldrex	r3, [r3]
 800299c:	623b      	str	r3, [r7, #32]
   return(result);
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029b2:	633a      	str	r2, [r7, #48]	; 0x30
 80029b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ba:	e841 2300 	strex	r3, r2, [r1]
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1e3      	bne.n	800298e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	330c      	adds	r3, #12
 80029da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	e853 3f00 	ldrex	r3, [r3]
 80029e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f023 0310 	bic.w	r3, r3, #16
 80029ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	330c      	adds	r3, #12
 80029f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80029f8:	61fa      	str	r2, [r7, #28]
 80029fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029fc:	69b9      	ldr	r1, [r7, #24]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	e841 2300 	strex	r3, r2, [r1]
 8002a04:	617b      	str	r3, [r7, #20]
   return(result);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1e3      	bne.n	80029d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f83e 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a18:	e023      	b.n	8002a62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_UART_IRQHandler+0x4ea>
 8002a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f95d 	bl	8002cf2 <UART_Transmit_IT>
    return;
 8002a38:	e014      	b.n	8002a64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <HAL_UART_IRQHandler+0x514>
 8002a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f99d 	bl	8002d92 <UART_EndTransmit_IT>
    return;
 8002a58:	e004      	b.n	8002a64 <HAL_UART_IRQHandler+0x514>
    return;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <HAL_UART_IRQHandler+0x514>
      return;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <HAL_UART_IRQHandler+0x514>
      return;
 8002a62:	bf00      	nop
  }
}
 8002a64:	37e8      	adds	r7, #232	; 0xe8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop

08002a6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b090      	sub	sp, #64	; 0x40
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002abc:	e050      	b.n	8002b60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac4:	d04c      	beq.n	8002b60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <UART_WaitOnFlagUntilTimeout+0x30>
 8002acc:	f7fe fac6 	bl	800105c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d241      	bcs.n	8002b60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	330c      	adds	r3, #12
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae6:	e853 3f00 	ldrex	r3, [r3]
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002af2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	330c      	adds	r3, #12
 8002afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002afc:	637a      	str	r2, [r7, #52]	; 0x34
 8002afe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b04:	e841 2300 	strex	r3, r2, [r1]
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1e5      	bne.n	8002adc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3314      	adds	r3, #20
 8002b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b30:	623a      	str	r2, [r7, #32]
 8002b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	69f9      	ldr	r1, [r7, #28]
 8002b36:	6a3a      	ldr	r2, [r7, #32]
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e5      	bne.n	8002b10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e00f      	b.n	8002b80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	461a      	mov	r2, r3
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d09f      	beq.n	8002abe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3740      	adds	r7, #64	; 0x40
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	4613      	mov	r3, r2
 8002b94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2222      	movs	r2, #34	; 0x22
 8002bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d007      	beq.n	8002bd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b095      	sub	sp, #84	; 0x54
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	330c      	adds	r3, #12
 8002c12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	e853 3f00 	ldrex	r3, [r3]
 8002c1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	330c      	adds	r3, #12
 8002c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c2c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e5      	bne.n	8002c0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	3314      	adds	r3, #20
 8002c46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	e853 3f00 	ldrex	r3, [r3]
 8002c4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	3314      	adds	r3, #20
 8002c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c68:	e841 2300 	strex	r3, r2, [r1]
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1e5      	bne.n	8002c40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d119      	bne.n	8002cb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	330c      	adds	r3, #12
 8002c82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	e853 3f00 	ldrex	r3, [r3]
 8002c8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f023 0310 	bic.w	r3, r3, #16
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	330c      	adds	r3, #12
 8002c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c9c:	61ba      	str	r2, [r7, #24]
 8002c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca0:	6979      	ldr	r1, [r7, #20]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	e841 2300 	strex	r3, r2, [r1]
 8002ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e5      	bne.n	8002c7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cbe:	bf00      	nop
 8002cc0:	3754      	adds	r7, #84	; 0x54
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f7ff fecb 	bl	8002a80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cea:	bf00      	nop
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b21      	cmp	r3, #33	; 0x21
 8002d04:	d13e      	bne.n	8002d84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0e:	d114      	bne.n	8002d3a <UART_Transmit_IT+0x48>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d110      	bne.n	8002d3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	1c9a      	adds	r2, r3, #2
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	621a      	str	r2, [r3, #32]
 8002d38:	e008      	b.n	8002d4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	1c59      	adds	r1, r3, #1
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6211      	str	r1, [r2, #32]
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10f      	bne.n	8002d80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68da      	ldr	r2, [r3, #12]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2220      	movs	r2, #32
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff fe5a 	bl	8002a6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b08c      	sub	sp, #48	; 0x30
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b22      	cmp	r3, #34	; 0x22
 8002dd4:	f040 80ab 	bne.w	8002f2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de0:	d117      	bne.n	8002e12 <UART_Receive_IT+0x50>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d113      	bne.n	8002e12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dea:	2300      	movs	r3, #0
 8002dec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	1c9a      	adds	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e10:	e026      	b.n	8002e60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d007      	beq.n	8002e36 <UART_Receive_IT+0x74>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10a      	bne.n	8002e44 <UART_Receive_IT+0x82>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d106      	bne.n	8002e44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	701a      	strb	r2, [r3, #0]
 8002e42:	e008      	b.n	8002e56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d15a      	bne.n	8002f2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0220 	bic.w	r2, r2, #32
 8002e82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d135      	bne.n	8002f20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	e853 3f00 	ldrex	r3, [r3]
 8002ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f023 0310 	bic.w	r3, r3, #16
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	330c      	adds	r3, #12
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eda:	623a      	str	r2, [r7, #32]
 8002edc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ede:	69f9      	ldr	r1, [r7, #28]
 8002ee0:	6a3a      	ldr	r2, [r7, #32]
 8002ee2:	e841 2300 	strex	r3, r2, [r1]
 8002ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1e5      	bne.n	8002eba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d10a      	bne.n	8002f12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fdbb 	bl	8002a94 <HAL_UARTEx_RxEventCallback>
 8002f1e:	e002      	b.n	8002f26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7fd fba1 	bl	8000668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e002      	b.n	8002f30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	e000      	b.n	8002f30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f2e:	2302      	movs	r3, #2
  }
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3730      	adds	r7, #48	; 0x30
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b0c0      	sub	sp, #256	; 0x100
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f54:	68d9      	ldr	r1, [r3, #12]
 8002f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	ea40 0301 	orr.w	r3, r0, r1
 8002f60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	431a      	orrs	r2, r3
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f90:	f021 010c 	bic.w	r1, r1, #12
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f9e:	430b      	orrs	r3, r1
 8002fa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb2:	6999      	ldr	r1, [r3, #24]
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	ea40 0301 	orr.w	r3, r0, r1
 8002fbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b8f      	ldr	r3, [pc, #572]	; (8003204 <UART_SetConfig+0x2cc>)
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d005      	beq.n	8002fd8 <UART_SetConfig+0xa0>
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b8d      	ldr	r3, [pc, #564]	; (8003208 <UART_SetConfig+0x2d0>)
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d104      	bne.n	8002fe2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fd8:	f7fe fcc8 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8002fdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002fe0:	e003      	b.n	8002fea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fe2:	f7fe fcaf 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8002fe6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff4:	f040 810c 	bne.w	8003210 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ff8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003002:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003006:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800300a:	4622      	mov	r2, r4
 800300c:	462b      	mov	r3, r5
 800300e:	1891      	adds	r1, r2, r2
 8003010:	65b9      	str	r1, [r7, #88]	; 0x58
 8003012:	415b      	adcs	r3, r3
 8003014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003016:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800301a:	4621      	mov	r1, r4
 800301c:	eb12 0801 	adds.w	r8, r2, r1
 8003020:	4629      	mov	r1, r5
 8003022:	eb43 0901 	adc.w	r9, r3, r1
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 0300 	mov.w	r3, #0
 800302e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003032:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003036:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800303a:	4690      	mov	r8, r2
 800303c:	4699      	mov	r9, r3
 800303e:	4623      	mov	r3, r4
 8003040:	eb18 0303 	adds.w	r3, r8, r3
 8003044:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003048:	462b      	mov	r3, r5
 800304a:	eb49 0303 	adc.w	r3, r9, r3
 800304e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800305e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003062:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003066:	460b      	mov	r3, r1
 8003068:	18db      	adds	r3, r3, r3
 800306a:	653b      	str	r3, [r7, #80]	; 0x50
 800306c:	4613      	mov	r3, r2
 800306e:	eb42 0303 	adc.w	r3, r2, r3
 8003072:	657b      	str	r3, [r7, #84]	; 0x54
 8003074:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003078:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800307c:	f7fd f920 	bl	80002c0 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4b61      	ldr	r3, [pc, #388]	; (800320c <UART_SetConfig+0x2d4>)
 8003086:	fba3 2302 	umull	r2, r3, r3, r2
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	011c      	lsls	r4, r3, #4
 800308e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003092:	2200      	movs	r2, #0
 8003094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003098:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800309c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030a0:	4642      	mov	r2, r8
 80030a2:	464b      	mov	r3, r9
 80030a4:	1891      	adds	r1, r2, r2
 80030a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80030a8:	415b      	adcs	r3, r3
 80030aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030b0:	4641      	mov	r1, r8
 80030b2:	eb12 0a01 	adds.w	sl, r2, r1
 80030b6:	4649      	mov	r1, r9
 80030b8:	eb43 0b01 	adc.w	fp, r3, r1
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d0:	4692      	mov	sl, r2
 80030d2:	469b      	mov	fp, r3
 80030d4:	4643      	mov	r3, r8
 80030d6:	eb1a 0303 	adds.w	r3, sl, r3
 80030da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030de:	464b      	mov	r3, r9
 80030e0:	eb4b 0303 	adc.w	r3, fp, r3
 80030e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80030f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030fc:	460b      	mov	r3, r1
 80030fe:	18db      	adds	r3, r3, r3
 8003100:	643b      	str	r3, [r7, #64]	; 0x40
 8003102:	4613      	mov	r3, r2
 8003104:	eb42 0303 	adc.w	r3, r2, r3
 8003108:	647b      	str	r3, [r7, #68]	; 0x44
 800310a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800310e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003112:	f7fd f8d5 	bl	80002c0 <__aeabi_uldivmod>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4611      	mov	r1, r2
 800311c:	4b3b      	ldr	r3, [pc, #236]	; (800320c <UART_SetConfig+0x2d4>)
 800311e:	fba3 2301 	umull	r2, r3, r3, r1
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	2264      	movs	r2, #100	; 0x64
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	1acb      	subs	r3, r1, r3
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003132:	4b36      	ldr	r3, [pc, #216]	; (800320c <UART_SetConfig+0x2d4>)
 8003134:	fba3 2302 	umull	r2, r3, r3, r2
 8003138:	095b      	lsrs	r3, r3, #5
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003140:	441c      	add	r4, r3
 8003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800314c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003150:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	1891      	adds	r1, r2, r2
 800315a:	63b9      	str	r1, [r7, #56]	; 0x38
 800315c:	415b      	adcs	r3, r3
 800315e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003164:	4641      	mov	r1, r8
 8003166:	1851      	adds	r1, r2, r1
 8003168:	6339      	str	r1, [r7, #48]	; 0x30
 800316a:	4649      	mov	r1, r9
 800316c:	414b      	adcs	r3, r1
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800317c:	4659      	mov	r1, fp
 800317e:	00cb      	lsls	r3, r1, #3
 8003180:	4651      	mov	r1, sl
 8003182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003186:	4651      	mov	r1, sl
 8003188:	00ca      	lsls	r2, r1, #3
 800318a:	4610      	mov	r0, r2
 800318c:	4619      	mov	r1, r3
 800318e:	4603      	mov	r3, r0
 8003190:	4642      	mov	r2, r8
 8003192:	189b      	adds	r3, r3, r2
 8003194:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003198:	464b      	mov	r3, r9
 800319a:	460a      	mov	r2, r1
 800319c:	eb42 0303 	adc.w	r3, r2, r3
 80031a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031b8:	460b      	mov	r3, r1
 80031ba:	18db      	adds	r3, r3, r3
 80031bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031be:	4613      	mov	r3, r2
 80031c0:	eb42 0303 	adc.w	r3, r2, r3
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031ce:	f7fd f877 	bl	80002c0 <__aeabi_uldivmod>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <UART_SetConfig+0x2d4>)
 80031d8:	fba3 1302 	umull	r1, r3, r3, r2
 80031dc:	095b      	lsrs	r3, r3, #5
 80031de:	2164      	movs	r1, #100	; 0x64
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	3332      	adds	r3, #50	; 0x32
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <UART_SetConfig+0x2d4>)
 80031ec:	fba2 2303 	umull	r2, r3, r2, r3
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 0207 	and.w	r2, r3, #7
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4422      	add	r2, r4
 80031fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003200:	e105      	b.n	800340e <UART_SetConfig+0x4d6>
 8003202:	bf00      	nop
 8003204:	40011000 	.word	0x40011000
 8003208:	40011400 	.word	0x40011400
 800320c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003214:	2200      	movs	r2, #0
 8003216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800321a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800321e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003222:	4642      	mov	r2, r8
 8003224:	464b      	mov	r3, r9
 8003226:	1891      	adds	r1, r2, r2
 8003228:	6239      	str	r1, [r7, #32]
 800322a:	415b      	adcs	r3, r3
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003232:	4641      	mov	r1, r8
 8003234:	1854      	adds	r4, r2, r1
 8003236:	4649      	mov	r1, r9
 8003238:	eb43 0501 	adc.w	r5, r3, r1
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	00eb      	lsls	r3, r5, #3
 8003246:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800324a:	00e2      	lsls	r2, r4, #3
 800324c:	4614      	mov	r4, r2
 800324e:	461d      	mov	r5, r3
 8003250:	4643      	mov	r3, r8
 8003252:	18e3      	adds	r3, r4, r3
 8003254:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003258:	464b      	mov	r3, r9
 800325a:	eb45 0303 	adc.w	r3, r5, r3
 800325e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800326e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800327e:	4629      	mov	r1, r5
 8003280:	008b      	lsls	r3, r1, #2
 8003282:	4621      	mov	r1, r4
 8003284:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003288:	4621      	mov	r1, r4
 800328a:	008a      	lsls	r2, r1, #2
 800328c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003290:	f7fd f816 	bl	80002c0 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4b60      	ldr	r3, [pc, #384]	; (800341c <UART_SetConfig+0x4e4>)
 800329a:	fba3 2302 	umull	r2, r3, r3, r2
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	011c      	lsls	r4, r3, #4
 80032a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a6:	2200      	movs	r2, #0
 80032a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032b4:	4642      	mov	r2, r8
 80032b6:	464b      	mov	r3, r9
 80032b8:	1891      	adds	r1, r2, r2
 80032ba:	61b9      	str	r1, [r7, #24]
 80032bc:	415b      	adcs	r3, r3
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032c4:	4641      	mov	r1, r8
 80032c6:	1851      	adds	r1, r2, r1
 80032c8:	6139      	str	r1, [r7, #16]
 80032ca:	4649      	mov	r1, r9
 80032cc:	414b      	adcs	r3, r1
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032dc:	4659      	mov	r1, fp
 80032de:	00cb      	lsls	r3, r1, #3
 80032e0:	4651      	mov	r1, sl
 80032e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032e6:	4651      	mov	r1, sl
 80032e8:	00ca      	lsls	r2, r1, #3
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	4642      	mov	r2, r8
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80032f8:	464b      	mov	r3, r9
 80032fa:	460a      	mov	r2, r1
 80032fc:	eb42 0303 	adc.w	r3, r2, r3
 8003300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	67bb      	str	r3, [r7, #120]	; 0x78
 800330e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800331c:	4649      	mov	r1, r9
 800331e:	008b      	lsls	r3, r1, #2
 8003320:	4641      	mov	r1, r8
 8003322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003326:	4641      	mov	r1, r8
 8003328:	008a      	lsls	r2, r1, #2
 800332a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800332e:	f7fc ffc7 	bl	80002c0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b39      	ldr	r3, [pc, #228]	; (800341c <UART_SetConfig+0x4e4>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a34      	ldr	r2, [pc, #208]	; (800341c <UART_SetConfig+0x4e4>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003356:	441c      	add	r4, r3
 8003358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800335c:	2200      	movs	r2, #0
 800335e:	673b      	str	r3, [r7, #112]	; 0x70
 8003360:	677a      	str	r2, [r7, #116]	; 0x74
 8003362:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003366:	4642      	mov	r2, r8
 8003368:	464b      	mov	r3, r9
 800336a:	1891      	adds	r1, r2, r2
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	415b      	adcs	r3, r3
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003376:	4641      	mov	r1, r8
 8003378:	1851      	adds	r1, r2, r1
 800337a:	6039      	str	r1, [r7, #0]
 800337c:	4649      	mov	r1, r9
 800337e:	414b      	adcs	r3, r1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800338e:	4659      	mov	r1, fp
 8003390:	00cb      	lsls	r3, r1, #3
 8003392:	4651      	mov	r1, sl
 8003394:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003398:	4651      	mov	r1, sl
 800339a:	00ca      	lsls	r2, r1, #3
 800339c:	4610      	mov	r0, r2
 800339e:	4619      	mov	r1, r3
 80033a0:	4603      	mov	r3, r0
 80033a2:	4642      	mov	r2, r8
 80033a4:	189b      	adds	r3, r3, r2
 80033a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033a8:	464b      	mov	r3, r9
 80033aa:	460a      	mov	r2, r1
 80033ac:	eb42 0303 	adc.w	r3, r2, r3
 80033b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	663b      	str	r3, [r7, #96]	; 0x60
 80033bc:	667a      	str	r2, [r7, #100]	; 0x64
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033ca:	4649      	mov	r1, r9
 80033cc:	008b      	lsls	r3, r1, #2
 80033ce:	4641      	mov	r1, r8
 80033d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033d4:	4641      	mov	r1, r8
 80033d6:	008a      	lsls	r2, r1, #2
 80033d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033dc:	f7fc ff70 	bl	80002c0 <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <UART_SetConfig+0x4e4>)
 80033e6:	fba3 1302 	umull	r1, r3, r3, r2
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2164      	movs	r1, #100	; 0x64
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	3332      	adds	r3, #50	; 0x32
 80033f8:	4a08      	ldr	r2, [pc, #32]	; (800341c <UART_SetConfig+0x4e4>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	095b      	lsrs	r3, r3, #5
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4422      	add	r2, r4
 800340c:	609a      	str	r2, [r3, #8]
}
 800340e:	bf00      	nop
 8003410:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003414:	46bd      	mov	sp, r7
 8003416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341a:	bf00      	nop
 800341c:	51eb851f 	.word	0x51eb851f

08003420 <atoi>:
 8003420:	220a      	movs	r2, #10
 8003422:	2100      	movs	r1, #0
 8003424:	f000 b8d4 	b.w	80035d0 <strtol>

08003428 <__errno>:
 8003428:	4b01      	ldr	r3, [pc, #4]	; (8003430 <__errno+0x8>)
 800342a:	6818      	ldr	r0, [r3, #0]
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	2000000c 	.word	0x2000000c

08003434 <__libc_init_array>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	4d0d      	ldr	r5, [pc, #52]	; (800346c <__libc_init_array+0x38>)
 8003438:	4c0d      	ldr	r4, [pc, #52]	; (8003470 <__libc_init_array+0x3c>)
 800343a:	1b64      	subs	r4, r4, r5
 800343c:	10a4      	asrs	r4, r4, #2
 800343e:	2600      	movs	r6, #0
 8003440:	42a6      	cmp	r6, r4
 8003442:	d109      	bne.n	8003458 <__libc_init_array+0x24>
 8003444:	4d0b      	ldr	r5, [pc, #44]	; (8003474 <__libc_init_array+0x40>)
 8003446:	4c0c      	ldr	r4, [pc, #48]	; (8003478 <__libc_init_array+0x44>)
 8003448:	f000 fd1a 	bl	8003e80 <_init>
 800344c:	1b64      	subs	r4, r4, r5
 800344e:	10a4      	asrs	r4, r4, #2
 8003450:	2600      	movs	r6, #0
 8003452:	42a6      	cmp	r6, r4
 8003454:	d105      	bne.n	8003462 <__libc_init_array+0x2e>
 8003456:	bd70      	pop	{r4, r5, r6, pc}
 8003458:	f855 3b04 	ldr.w	r3, [r5], #4
 800345c:	4798      	blx	r3
 800345e:	3601      	adds	r6, #1
 8003460:	e7ee      	b.n	8003440 <__libc_init_array+0xc>
 8003462:	f855 3b04 	ldr.w	r3, [r5], #4
 8003466:	4798      	blx	r3
 8003468:	3601      	adds	r6, #1
 800346a:	e7f2      	b.n	8003452 <__libc_init_array+0x1e>
 800346c:	080040fc 	.word	0x080040fc
 8003470:	080040fc 	.word	0x080040fc
 8003474:	080040fc 	.word	0x080040fc
 8003478:	08004100 	.word	0x08004100

0800347c <memset>:
 800347c:	4402      	add	r2, r0
 800347e:	4603      	mov	r3, r0
 8003480:	4293      	cmp	r3, r2
 8003482:	d100      	bne.n	8003486 <memset+0xa>
 8003484:	4770      	bx	lr
 8003486:	f803 1b01 	strb.w	r1, [r3], #1
 800348a:	e7f9      	b.n	8003480 <memset+0x4>

0800348c <siprintf>:
 800348c:	b40e      	push	{r1, r2, r3}
 800348e:	b500      	push	{lr}
 8003490:	b09c      	sub	sp, #112	; 0x70
 8003492:	ab1d      	add	r3, sp, #116	; 0x74
 8003494:	9002      	str	r0, [sp, #8]
 8003496:	9006      	str	r0, [sp, #24]
 8003498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800349c:	4809      	ldr	r0, [pc, #36]	; (80034c4 <siprintf+0x38>)
 800349e:	9107      	str	r1, [sp, #28]
 80034a0:	9104      	str	r1, [sp, #16]
 80034a2:	4909      	ldr	r1, [pc, #36]	; (80034c8 <siprintf+0x3c>)
 80034a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80034a8:	9105      	str	r1, [sp, #20]
 80034aa:	6800      	ldr	r0, [r0, #0]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	a902      	add	r1, sp, #8
 80034b0:	f000 f8f4 	bl	800369c <_svfiprintf_r>
 80034b4:	9b02      	ldr	r3, [sp, #8]
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
 80034ba:	b01c      	add	sp, #112	; 0x70
 80034bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80034c0:	b003      	add	sp, #12
 80034c2:	4770      	bx	lr
 80034c4:	2000000c 	.word	0x2000000c
 80034c8:	ffff0208 	.word	0xffff0208

080034cc <_strtol_l.constprop.0>:
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d2:	d001      	beq.n	80034d8 <_strtol_l.constprop.0+0xc>
 80034d4:	2b24      	cmp	r3, #36	; 0x24
 80034d6:	d906      	bls.n	80034e6 <_strtol_l.constprop.0+0x1a>
 80034d8:	f7ff ffa6 	bl	8003428 <__errno>
 80034dc:	2316      	movs	r3, #22
 80034de:	6003      	str	r3, [r0, #0]
 80034e0:	2000      	movs	r0, #0
 80034e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80035cc <_strtol_l.constprop.0+0x100>
 80034ea:	460d      	mov	r5, r1
 80034ec:	462e      	mov	r6, r5
 80034ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034f2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80034f6:	f017 0708 	ands.w	r7, r7, #8
 80034fa:	d1f7      	bne.n	80034ec <_strtol_l.constprop.0+0x20>
 80034fc:	2c2d      	cmp	r4, #45	; 0x2d
 80034fe:	d132      	bne.n	8003566 <_strtol_l.constprop.0+0x9a>
 8003500:	782c      	ldrb	r4, [r5, #0]
 8003502:	2701      	movs	r7, #1
 8003504:	1cb5      	adds	r5, r6, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d05b      	beq.n	80035c2 <_strtol_l.constprop.0+0xf6>
 800350a:	2b10      	cmp	r3, #16
 800350c:	d109      	bne.n	8003522 <_strtol_l.constprop.0+0x56>
 800350e:	2c30      	cmp	r4, #48	; 0x30
 8003510:	d107      	bne.n	8003522 <_strtol_l.constprop.0+0x56>
 8003512:	782c      	ldrb	r4, [r5, #0]
 8003514:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003518:	2c58      	cmp	r4, #88	; 0x58
 800351a:	d14d      	bne.n	80035b8 <_strtol_l.constprop.0+0xec>
 800351c:	786c      	ldrb	r4, [r5, #1]
 800351e:	2310      	movs	r3, #16
 8003520:	3502      	adds	r5, #2
 8003522:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003526:	f108 38ff 	add.w	r8, r8, #4294967295
 800352a:	f04f 0c00 	mov.w	ip, #0
 800352e:	fbb8 f9f3 	udiv	r9, r8, r3
 8003532:	4666      	mov	r6, ip
 8003534:	fb03 8a19 	mls	sl, r3, r9, r8
 8003538:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800353c:	f1be 0f09 	cmp.w	lr, #9
 8003540:	d816      	bhi.n	8003570 <_strtol_l.constprop.0+0xa4>
 8003542:	4674      	mov	r4, lr
 8003544:	42a3      	cmp	r3, r4
 8003546:	dd24      	ble.n	8003592 <_strtol_l.constprop.0+0xc6>
 8003548:	f1bc 0f00 	cmp.w	ip, #0
 800354c:	db1e      	blt.n	800358c <_strtol_l.constprop.0+0xc0>
 800354e:	45b1      	cmp	r9, r6
 8003550:	d31c      	bcc.n	800358c <_strtol_l.constprop.0+0xc0>
 8003552:	d101      	bne.n	8003558 <_strtol_l.constprop.0+0x8c>
 8003554:	45a2      	cmp	sl, r4
 8003556:	db19      	blt.n	800358c <_strtol_l.constprop.0+0xc0>
 8003558:	fb06 4603 	mla	r6, r6, r3, r4
 800355c:	f04f 0c01 	mov.w	ip, #1
 8003560:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003564:	e7e8      	b.n	8003538 <_strtol_l.constprop.0+0x6c>
 8003566:	2c2b      	cmp	r4, #43	; 0x2b
 8003568:	bf04      	itt	eq
 800356a:	782c      	ldrbeq	r4, [r5, #0]
 800356c:	1cb5      	addeq	r5, r6, #2
 800356e:	e7ca      	b.n	8003506 <_strtol_l.constprop.0+0x3a>
 8003570:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003574:	f1be 0f19 	cmp.w	lr, #25
 8003578:	d801      	bhi.n	800357e <_strtol_l.constprop.0+0xb2>
 800357a:	3c37      	subs	r4, #55	; 0x37
 800357c:	e7e2      	b.n	8003544 <_strtol_l.constprop.0+0x78>
 800357e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003582:	f1be 0f19 	cmp.w	lr, #25
 8003586:	d804      	bhi.n	8003592 <_strtol_l.constprop.0+0xc6>
 8003588:	3c57      	subs	r4, #87	; 0x57
 800358a:	e7db      	b.n	8003544 <_strtol_l.constprop.0+0x78>
 800358c:	f04f 3cff 	mov.w	ip, #4294967295
 8003590:	e7e6      	b.n	8003560 <_strtol_l.constprop.0+0x94>
 8003592:	f1bc 0f00 	cmp.w	ip, #0
 8003596:	da05      	bge.n	80035a4 <_strtol_l.constprop.0+0xd8>
 8003598:	2322      	movs	r3, #34	; 0x22
 800359a:	6003      	str	r3, [r0, #0]
 800359c:	4646      	mov	r6, r8
 800359e:	b942      	cbnz	r2, 80035b2 <_strtol_l.constprop.0+0xe6>
 80035a0:	4630      	mov	r0, r6
 80035a2:	e79e      	b.n	80034e2 <_strtol_l.constprop.0+0x16>
 80035a4:	b107      	cbz	r7, 80035a8 <_strtol_l.constprop.0+0xdc>
 80035a6:	4276      	negs	r6, r6
 80035a8:	2a00      	cmp	r2, #0
 80035aa:	d0f9      	beq.n	80035a0 <_strtol_l.constprop.0+0xd4>
 80035ac:	f1bc 0f00 	cmp.w	ip, #0
 80035b0:	d000      	beq.n	80035b4 <_strtol_l.constprop.0+0xe8>
 80035b2:	1e69      	subs	r1, r5, #1
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	e7f3      	b.n	80035a0 <_strtol_l.constprop.0+0xd4>
 80035b8:	2430      	movs	r4, #48	; 0x30
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1b1      	bne.n	8003522 <_strtol_l.constprop.0+0x56>
 80035be:	2308      	movs	r3, #8
 80035c0:	e7af      	b.n	8003522 <_strtol_l.constprop.0+0x56>
 80035c2:	2c30      	cmp	r4, #48	; 0x30
 80035c4:	d0a5      	beq.n	8003512 <_strtol_l.constprop.0+0x46>
 80035c6:	230a      	movs	r3, #10
 80035c8:	e7ab      	b.n	8003522 <_strtol_l.constprop.0+0x56>
 80035ca:	bf00      	nop
 80035cc:	08003fc1 	.word	0x08003fc1

080035d0 <strtol>:
 80035d0:	4613      	mov	r3, r2
 80035d2:	460a      	mov	r2, r1
 80035d4:	4601      	mov	r1, r0
 80035d6:	4802      	ldr	r0, [pc, #8]	; (80035e0 <strtol+0x10>)
 80035d8:	6800      	ldr	r0, [r0, #0]
 80035da:	f7ff bf77 	b.w	80034cc <_strtol_l.constprop.0>
 80035de:	bf00      	nop
 80035e0:	2000000c 	.word	0x2000000c

080035e4 <__ssputs_r>:
 80035e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035e8:	688e      	ldr	r6, [r1, #8]
 80035ea:	429e      	cmp	r6, r3
 80035ec:	4682      	mov	sl, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	4690      	mov	r8, r2
 80035f2:	461f      	mov	r7, r3
 80035f4:	d838      	bhi.n	8003668 <__ssputs_r+0x84>
 80035f6:	898a      	ldrh	r2, [r1, #12]
 80035f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035fc:	d032      	beq.n	8003664 <__ssputs_r+0x80>
 80035fe:	6825      	ldr	r5, [r4, #0]
 8003600:	6909      	ldr	r1, [r1, #16]
 8003602:	eba5 0901 	sub.w	r9, r5, r1
 8003606:	6965      	ldr	r5, [r4, #20]
 8003608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800360c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003610:	3301      	adds	r3, #1
 8003612:	444b      	add	r3, r9
 8003614:	106d      	asrs	r5, r5, #1
 8003616:	429d      	cmp	r5, r3
 8003618:	bf38      	it	cc
 800361a:	461d      	movcc	r5, r3
 800361c:	0553      	lsls	r3, r2, #21
 800361e:	d531      	bpl.n	8003684 <__ssputs_r+0xa0>
 8003620:	4629      	mov	r1, r5
 8003622:	f000 fb63 	bl	8003cec <_malloc_r>
 8003626:	4606      	mov	r6, r0
 8003628:	b950      	cbnz	r0, 8003640 <__ssputs_r+0x5c>
 800362a:	230c      	movs	r3, #12
 800362c:	f8ca 3000 	str.w	r3, [sl]
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003640:	6921      	ldr	r1, [r4, #16]
 8003642:	464a      	mov	r2, r9
 8003644:	f000 fabe 	bl	8003bc4 <memcpy>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800364e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003652:	81a3      	strh	r3, [r4, #12]
 8003654:	6126      	str	r6, [r4, #16]
 8003656:	6165      	str	r5, [r4, #20]
 8003658:	444e      	add	r6, r9
 800365a:	eba5 0509 	sub.w	r5, r5, r9
 800365e:	6026      	str	r6, [r4, #0]
 8003660:	60a5      	str	r5, [r4, #8]
 8003662:	463e      	mov	r6, r7
 8003664:	42be      	cmp	r6, r7
 8003666:	d900      	bls.n	800366a <__ssputs_r+0x86>
 8003668:	463e      	mov	r6, r7
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	4632      	mov	r2, r6
 800366e:	4641      	mov	r1, r8
 8003670:	f000 fab6 	bl	8003be0 <memmove>
 8003674:	68a3      	ldr	r3, [r4, #8]
 8003676:	1b9b      	subs	r3, r3, r6
 8003678:	60a3      	str	r3, [r4, #8]
 800367a:	6823      	ldr	r3, [r4, #0]
 800367c:	4433      	add	r3, r6
 800367e:	6023      	str	r3, [r4, #0]
 8003680:	2000      	movs	r0, #0
 8003682:	e7db      	b.n	800363c <__ssputs_r+0x58>
 8003684:	462a      	mov	r2, r5
 8003686:	f000 fba5 	bl	8003dd4 <_realloc_r>
 800368a:	4606      	mov	r6, r0
 800368c:	2800      	cmp	r0, #0
 800368e:	d1e1      	bne.n	8003654 <__ssputs_r+0x70>
 8003690:	6921      	ldr	r1, [r4, #16]
 8003692:	4650      	mov	r0, sl
 8003694:	f000 fabe 	bl	8003c14 <_free_r>
 8003698:	e7c7      	b.n	800362a <__ssputs_r+0x46>
	...

0800369c <_svfiprintf_r>:
 800369c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a0:	4698      	mov	r8, r3
 80036a2:	898b      	ldrh	r3, [r1, #12]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	b09d      	sub	sp, #116	; 0x74
 80036a8:	4607      	mov	r7, r0
 80036aa:	460d      	mov	r5, r1
 80036ac:	4614      	mov	r4, r2
 80036ae:	d50e      	bpl.n	80036ce <_svfiprintf_r+0x32>
 80036b0:	690b      	ldr	r3, [r1, #16]
 80036b2:	b963      	cbnz	r3, 80036ce <_svfiprintf_r+0x32>
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	f000 fb19 	bl	8003cec <_malloc_r>
 80036ba:	6028      	str	r0, [r5, #0]
 80036bc:	6128      	str	r0, [r5, #16]
 80036be:	b920      	cbnz	r0, 80036ca <_svfiprintf_r+0x2e>
 80036c0:	230c      	movs	r3, #12
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	e0d1      	b.n	800386e <_svfiprintf_r+0x1d2>
 80036ca:	2340      	movs	r3, #64	; 0x40
 80036cc:	616b      	str	r3, [r5, #20]
 80036ce:	2300      	movs	r3, #0
 80036d0:	9309      	str	r3, [sp, #36]	; 0x24
 80036d2:	2320      	movs	r3, #32
 80036d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80036dc:	2330      	movs	r3, #48	; 0x30
 80036de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003888 <_svfiprintf_r+0x1ec>
 80036e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036e6:	f04f 0901 	mov.w	r9, #1
 80036ea:	4623      	mov	r3, r4
 80036ec:	469a      	mov	sl, r3
 80036ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036f2:	b10a      	cbz	r2, 80036f8 <_svfiprintf_r+0x5c>
 80036f4:	2a25      	cmp	r2, #37	; 0x25
 80036f6:	d1f9      	bne.n	80036ec <_svfiprintf_r+0x50>
 80036f8:	ebba 0b04 	subs.w	fp, sl, r4
 80036fc:	d00b      	beq.n	8003716 <_svfiprintf_r+0x7a>
 80036fe:	465b      	mov	r3, fp
 8003700:	4622      	mov	r2, r4
 8003702:	4629      	mov	r1, r5
 8003704:	4638      	mov	r0, r7
 8003706:	f7ff ff6d 	bl	80035e4 <__ssputs_r>
 800370a:	3001      	adds	r0, #1
 800370c:	f000 80aa 	beq.w	8003864 <_svfiprintf_r+0x1c8>
 8003710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003712:	445a      	add	r2, fp
 8003714:	9209      	str	r2, [sp, #36]	; 0x24
 8003716:	f89a 3000 	ldrb.w	r3, [sl]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80a2 	beq.w	8003864 <_svfiprintf_r+0x1c8>
 8003720:	2300      	movs	r3, #0
 8003722:	f04f 32ff 	mov.w	r2, #4294967295
 8003726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800372a:	f10a 0a01 	add.w	sl, sl, #1
 800372e:	9304      	str	r3, [sp, #16]
 8003730:	9307      	str	r3, [sp, #28]
 8003732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003736:	931a      	str	r3, [sp, #104]	; 0x68
 8003738:	4654      	mov	r4, sl
 800373a:	2205      	movs	r2, #5
 800373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003740:	4851      	ldr	r0, [pc, #324]	; (8003888 <_svfiprintf_r+0x1ec>)
 8003742:	f7fc fd6d 	bl	8000220 <memchr>
 8003746:	9a04      	ldr	r2, [sp, #16]
 8003748:	b9d8      	cbnz	r0, 8003782 <_svfiprintf_r+0xe6>
 800374a:	06d0      	lsls	r0, r2, #27
 800374c:	bf44      	itt	mi
 800374e:	2320      	movmi	r3, #32
 8003750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003754:	0711      	lsls	r1, r2, #28
 8003756:	bf44      	itt	mi
 8003758:	232b      	movmi	r3, #43	; 0x2b
 800375a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800375e:	f89a 3000 	ldrb.w	r3, [sl]
 8003762:	2b2a      	cmp	r3, #42	; 0x2a
 8003764:	d015      	beq.n	8003792 <_svfiprintf_r+0xf6>
 8003766:	9a07      	ldr	r2, [sp, #28]
 8003768:	4654      	mov	r4, sl
 800376a:	2000      	movs	r0, #0
 800376c:	f04f 0c0a 	mov.w	ip, #10
 8003770:	4621      	mov	r1, r4
 8003772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003776:	3b30      	subs	r3, #48	; 0x30
 8003778:	2b09      	cmp	r3, #9
 800377a:	d94e      	bls.n	800381a <_svfiprintf_r+0x17e>
 800377c:	b1b0      	cbz	r0, 80037ac <_svfiprintf_r+0x110>
 800377e:	9207      	str	r2, [sp, #28]
 8003780:	e014      	b.n	80037ac <_svfiprintf_r+0x110>
 8003782:	eba0 0308 	sub.w	r3, r0, r8
 8003786:	fa09 f303 	lsl.w	r3, r9, r3
 800378a:	4313      	orrs	r3, r2
 800378c:	9304      	str	r3, [sp, #16]
 800378e:	46a2      	mov	sl, r4
 8003790:	e7d2      	b.n	8003738 <_svfiprintf_r+0x9c>
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	1d19      	adds	r1, r3, #4
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	9103      	str	r1, [sp, #12]
 800379a:	2b00      	cmp	r3, #0
 800379c:	bfbb      	ittet	lt
 800379e:	425b      	neglt	r3, r3
 80037a0:	f042 0202 	orrlt.w	r2, r2, #2
 80037a4:	9307      	strge	r3, [sp, #28]
 80037a6:	9307      	strlt	r3, [sp, #28]
 80037a8:	bfb8      	it	lt
 80037aa:	9204      	strlt	r2, [sp, #16]
 80037ac:	7823      	ldrb	r3, [r4, #0]
 80037ae:	2b2e      	cmp	r3, #46	; 0x2e
 80037b0:	d10c      	bne.n	80037cc <_svfiprintf_r+0x130>
 80037b2:	7863      	ldrb	r3, [r4, #1]
 80037b4:	2b2a      	cmp	r3, #42	; 0x2a
 80037b6:	d135      	bne.n	8003824 <_svfiprintf_r+0x188>
 80037b8:	9b03      	ldr	r3, [sp, #12]
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	9203      	str	r2, [sp, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bfb8      	it	lt
 80037c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80037c8:	3402      	adds	r4, #2
 80037ca:	9305      	str	r3, [sp, #20]
 80037cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003898 <_svfiprintf_r+0x1fc>
 80037d0:	7821      	ldrb	r1, [r4, #0]
 80037d2:	2203      	movs	r2, #3
 80037d4:	4650      	mov	r0, sl
 80037d6:	f7fc fd23 	bl	8000220 <memchr>
 80037da:	b140      	cbz	r0, 80037ee <_svfiprintf_r+0x152>
 80037dc:	2340      	movs	r3, #64	; 0x40
 80037de:	eba0 000a 	sub.w	r0, r0, sl
 80037e2:	fa03 f000 	lsl.w	r0, r3, r0
 80037e6:	9b04      	ldr	r3, [sp, #16]
 80037e8:	4303      	orrs	r3, r0
 80037ea:	3401      	adds	r4, #1
 80037ec:	9304      	str	r3, [sp, #16]
 80037ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f2:	4826      	ldr	r0, [pc, #152]	; (800388c <_svfiprintf_r+0x1f0>)
 80037f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037f8:	2206      	movs	r2, #6
 80037fa:	f7fc fd11 	bl	8000220 <memchr>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d038      	beq.n	8003874 <_svfiprintf_r+0x1d8>
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <_svfiprintf_r+0x1f4>)
 8003804:	bb1b      	cbnz	r3, 800384e <_svfiprintf_r+0x1b2>
 8003806:	9b03      	ldr	r3, [sp, #12]
 8003808:	3307      	adds	r3, #7
 800380a:	f023 0307 	bic.w	r3, r3, #7
 800380e:	3308      	adds	r3, #8
 8003810:	9303      	str	r3, [sp, #12]
 8003812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003814:	4433      	add	r3, r6
 8003816:	9309      	str	r3, [sp, #36]	; 0x24
 8003818:	e767      	b.n	80036ea <_svfiprintf_r+0x4e>
 800381a:	fb0c 3202 	mla	r2, ip, r2, r3
 800381e:	460c      	mov	r4, r1
 8003820:	2001      	movs	r0, #1
 8003822:	e7a5      	b.n	8003770 <_svfiprintf_r+0xd4>
 8003824:	2300      	movs	r3, #0
 8003826:	3401      	adds	r4, #1
 8003828:	9305      	str	r3, [sp, #20]
 800382a:	4619      	mov	r1, r3
 800382c:	f04f 0c0a 	mov.w	ip, #10
 8003830:	4620      	mov	r0, r4
 8003832:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003836:	3a30      	subs	r2, #48	; 0x30
 8003838:	2a09      	cmp	r2, #9
 800383a:	d903      	bls.n	8003844 <_svfiprintf_r+0x1a8>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0c5      	beq.n	80037cc <_svfiprintf_r+0x130>
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	e7c3      	b.n	80037cc <_svfiprintf_r+0x130>
 8003844:	fb0c 2101 	mla	r1, ip, r1, r2
 8003848:	4604      	mov	r4, r0
 800384a:	2301      	movs	r3, #1
 800384c:	e7f0      	b.n	8003830 <_svfiprintf_r+0x194>
 800384e:	ab03      	add	r3, sp, #12
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	462a      	mov	r2, r5
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <_svfiprintf_r+0x1f8>)
 8003856:	a904      	add	r1, sp, #16
 8003858:	4638      	mov	r0, r7
 800385a:	f3af 8000 	nop.w
 800385e:	1c42      	adds	r2, r0, #1
 8003860:	4606      	mov	r6, r0
 8003862:	d1d6      	bne.n	8003812 <_svfiprintf_r+0x176>
 8003864:	89ab      	ldrh	r3, [r5, #12]
 8003866:	065b      	lsls	r3, r3, #25
 8003868:	f53f af2c 	bmi.w	80036c4 <_svfiprintf_r+0x28>
 800386c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800386e:	b01d      	add	sp, #116	; 0x74
 8003870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003874:	ab03      	add	r3, sp, #12
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	462a      	mov	r2, r5
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <_svfiprintf_r+0x1f8>)
 800387c:	a904      	add	r1, sp, #16
 800387e:	4638      	mov	r0, r7
 8003880:	f000 f87a 	bl	8003978 <_printf_i>
 8003884:	e7eb      	b.n	800385e <_svfiprintf_r+0x1c2>
 8003886:	bf00      	nop
 8003888:	080040c1 	.word	0x080040c1
 800388c:	080040cb 	.word	0x080040cb
 8003890:	00000000 	.word	0x00000000
 8003894:	080035e5 	.word	0x080035e5
 8003898:	080040c7 	.word	0x080040c7

0800389c <_printf_common>:
 800389c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a0:	4616      	mov	r6, r2
 80038a2:	4699      	mov	r9, r3
 80038a4:	688a      	ldr	r2, [r1, #8]
 80038a6:	690b      	ldr	r3, [r1, #16]
 80038a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bfb8      	it	lt
 80038b0:	4613      	movlt	r3, r2
 80038b2:	6033      	str	r3, [r6, #0]
 80038b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038b8:	4607      	mov	r7, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	b10a      	cbz	r2, 80038c2 <_printf_common+0x26>
 80038be:	3301      	adds	r3, #1
 80038c0:	6033      	str	r3, [r6, #0]
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	0699      	lsls	r1, r3, #26
 80038c6:	bf42      	ittt	mi
 80038c8:	6833      	ldrmi	r3, [r6, #0]
 80038ca:	3302      	addmi	r3, #2
 80038cc:	6033      	strmi	r3, [r6, #0]
 80038ce:	6825      	ldr	r5, [r4, #0]
 80038d0:	f015 0506 	ands.w	r5, r5, #6
 80038d4:	d106      	bne.n	80038e4 <_printf_common+0x48>
 80038d6:	f104 0a19 	add.w	sl, r4, #25
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	6832      	ldr	r2, [r6, #0]
 80038de:	1a9b      	subs	r3, r3, r2
 80038e0:	42ab      	cmp	r3, r5
 80038e2:	dc26      	bgt.n	8003932 <_printf_common+0x96>
 80038e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038e8:	1e13      	subs	r3, r2, #0
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	bf18      	it	ne
 80038ee:	2301      	movne	r3, #1
 80038f0:	0692      	lsls	r2, r2, #26
 80038f2:	d42b      	bmi.n	800394c <_printf_common+0xb0>
 80038f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038f8:	4649      	mov	r1, r9
 80038fa:	4638      	mov	r0, r7
 80038fc:	47c0      	blx	r8
 80038fe:	3001      	adds	r0, #1
 8003900:	d01e      	beq.n	8003940 <_printf_common+0xa4>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	68e5      	ldr	r5, [r4, #12]
 8003906:	6832      	ldr	r2, [r6, #0]
 8003908:	f003 0306 	and.w	r3, r3, #6
 800390c:	2b04      	cmp	r3, #4
 800390e:	bf08      	it	eq
 8003910:	1aad      	subeq	r5, r5, r2
 8003912:	68a3      	ldr	r3, [r4, #8]
 8003914:	6922      	ldr	r2, [r4, #16]
 8003916:	bf0c      	ite	eq
 8003918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800391c:	2500      	movne	r5, #0
 800391e:	4293      	cmp	r3, r2
 8003920:	bfc4      	itt	gt
 8003922:	1a9b      	subgt	r3, r3, r2
 8003924:	18ed      	addgt	r5, r5, r3
 8003926:	2600      	movs	r6, #0
 8003928:	341a      	adds	r4, #26
 800392a:	42b5      	cmp	r5, r6
 800392c:	d11a      	bne.n	8003964 <_printf_common+0xc8>
 800392e:	2000      	movs	r0, #0
 8003930:	e008      	b.n	8003944 <_printf_common+0xa8>
 8003932:	2301      	movs	r3, #1
 8003934:	4652      	mov	r2, sl
 8003936:	4649      	mov	r1, r9
 8003938:	4638      	mov	r0, r7
 800393a:	47c0      	blx	r8
 800393c:	3001      	adds	r0, #1
 800393e:	d103      	bne.n	8003948 <_printf_common+0xac>
 8003940:	f04f 30ff 	mov.w	r0, #4294967295
 8003944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003948:	3501      	adds	r5, #1
 800394a:	e7c6      	b.n	80038da <_printf_common+0x3e>
 800394c:	18e1      	adds	r1, r4, r3
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	2030      	movs	r0, #48	; 0x30
 8003952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003956:	4422      	add	r2, r4
 8003958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800395c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003960:	3302      	adds	r3, #2
 8003962:	e7c7      	b.n	80038f4 <_printf_common+0x58>
 8003964:	2301      	movs	r3, #1
 8003966:	4622      	mov	r2, r4
 8003968:	4649      	mov	r1, r9
 800396a:	4638      	mov	r0, r7
 800396c:	47c0      	blx	r8
 800396e:	3001      	adds	r0, #1
 8003970:	d0e6      	beq.n	8003940 <_printf_common+0xa4>
 8003972:	3601      	adds	r6, #1
 8003974:	e7d9      	b.n	800392a <_printf_common+0x8e>
	...

08003978 <_printf_i>:
 8003978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800397c:	7e0f      	ldrb	r7, [r1, #24]
 800397e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003980:	2f78      	cmp	r7, #120	; 0x78
 8003982:	4691      	mov	r9, r2
 8003984:	4680      	mov	r8, r0
 8003986:	460c      	mov	r4, r1
 8003988:	469a      	mov	sl, r3
 800398a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800398e:	d807      	bhi.n	80039a0 <_printf_i+0x28>
 8003990:	2f62      	cmp	r7, #98	; 0x62
 8003992:	d80a      	bhi.n	80039aa <_printf_i+0x32>
 8003994:	2f00      	cmp	r7, #0
 8003996:	f000 80d8 	beq.w	8003b4a <_printf_i+0x1d2>
 800399a:	2f58      	cmp	r7, #88	; 0x58
 800399c:	f000 80a3 	beq.w	8003ae6 <_printf_i+0x16e>
 80039a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039a8:	e03a      	b.n	8003a20 <_printf_i+0xa8>
 80039aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039ae:	2b15      	cmp	r3, #21
 80039b0:	d8f6      	bhi.n	80039a0 <_printf_i+0x28>
 80039b2:	a101      	add	r1, pc, #4	; (adr r1, 80039b8 <_printf_i+0x40>)
 80039b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039b8:	08003a11 	.word	0x08003a11
 80039bc:	08003a25 	.word	0x08003a25
 80039c0:	080039a1 	.word	0x080039a1
 80039c4:	080039a1 	.word	0x080039a1
 80039c8:	080039a1 	.word	0x080039a1
 80039cc:	080039a1 	.word	0x080039a1
 80039d0:	08003a25 	.word	0x08003a25
 80039d4:	080039a1 	.word	0x080039a1
 80039d8:	080039a1 	.word	0x080039a1
 80039dc:	080039a1 	.word	0x080039a1
 80039e0:	080039a1 	.word	0x080039a1
 80039e4:	08003b31 	.word	0x08003b31
 80039e8:	08003a55 	.word	0x08003a55
 80039ec:	08003b13 	.word	0x08003b13
 80039f0:	080039a1 	.word	0x080039a1
 80039f4:	080039a1 	.word	0x080039a1
 80039f8:	08003b53 	.word	0x08003b53
 80039fc:	080039a1 	.word	0x080039a1
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	080039a1 	.word	0x080039a1
 8003a08:	080039a1 	.word	0x080039a1
 8003a0c:	08003b1b 	.word	0x08003b1b
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	602a      	str	r2, [r5, #0]
 8003a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0a3      	b.n	8003b6c <_printf_i+0x1f4>
 8003a24:	6820      	ldr	r0, [r4, #0]
 8003a26:	6829      	ldr	r1, [r5, #0]
 8003a28:	0606      	lsls	r6, r0, #24
 8003a2a:	f101 0304 	add.w	r3, r1, #4
 8003a2e:	d50a      	bpl.n	8003a46 <_printf_i+0xce>
 8003a30:	680e      	ldr	r6, [r1, #0]
 8003a32:	602b      	str	r3, [r5, #0]
 8003a34:	2e00      	cmp	r6, #0
 8003a36:	da03      	bge.n	8003a40 <_printf_i+0xc8>
 8003a38:	232d      	movs	r3, #45	; 0x2d
 8003a3a:	4276      	negs	r6, r6
 8003a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a40:	485e      	ldr	r0, [pc, #376]	; (8003bbc <_printf_i+0x244>)
 8003a42:	230a      	movs	r3, #10
 8003a44:	e019      	b.n	8003a7a <_printf_i+0x102>
 8003a46:	680e      	ldr	r6, [r1, #0]
 8003a48:	602b      	str	r3, [r5, #0]
 8003a4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a4e:	bf18      	it	ne
 8003a50:	b236      	sxthne	r6, r6
 8003a52:	e7ef      	b.n	8003a34 <_printf_i+0xbc>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	6820      	ldr	r0, [r4, #0]
 8003a58:	1d19      	adds	r1, r3, #4
 8003a5a:	6029      	str	r1, [r5, #0]
 8003a5c:	0601      	lsls	r1, r0, #24
 8003a5e:	d501      	bpl.n	8003a64 <_printf_i+0xec>
 8003a60:	681e      	ldr	r6, [r3, #0]
 8003a62:	e002      	b.n	8003a6a <_printf_i+0xf2>
 8003a64:	0646      	lsls	r6, r0, #25
 8003a66:	d5fb      	bpl.n	8003a60 <_printf_i+0xe8>
 8003a68:	881e      	ldrh	r6, [r3, #0]
 8003a6a:	4854      	ldr	r0, [pc, #336]	; (8003bbc <_printf_i+0x244>)
 8003a6c:	2f6f      	cmp	r7, #111	; 0x6f
 8003a6e:	bf0c      	ite	eq
 8003a70:	2308      	moveq	r3, #8
 8003a72:	230a      	movne	r3, #10
 8003a74:	2100      	movs	r1, #0
 8003a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a7a:	6865      	ldr	r5, [r4, #4]
 8003a7c:	60a5      	str	r5, [r4, #8]
 8003a7e:	2d00      	cmp	r5, #0
 8003a80:	bfa2      	ittt	ge
 8003a82:	6821      	ldrge	r1, [r4, #0]
 8003a84:	f021 0104 	bicge.w	r1, r1, #4
 8003a88:	6021      	strge	r1, [r4, #0]
 8003a8a:	b90e      	cbnz	r6, 8003a90 <_printf_i+0x118>
 8003a8c:	2d00      	cmp	r5, #0
 8003a8e:	d04d      	beq.n	8003b2c <_printf_i+0x1b4>
 8003a90:	4615      	mov	r5, r2
 8003a92:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a96:	fb03 6711 	mls	r7, r3, r1, r6
 8003a9a:	5dc7      	ldrb	r7, [r0, r7]
 8003a9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003aa0:	4637      	mov	r7, r6
 8003aa2:	42bb      	cmp	r3, r7
 8003aa4:	460e      	mov	r6, r1
 8003aa6:	d9f4      	bls.n	8003a92 <_printf_i+0x11a>
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d10b      	bne.n	8003ac4 <_printf_i+0x14c>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	07de      	lsls	r6, r3, #31
 8003ab0:	d508      	bpl.n	8003ac4 <_printf_i+0x14c>
 8003ab2:	6923      	ldr	r3, [r4, #16]
 8003ab4:	6861      	ldr	r1, [r4, #4]
 8003ab6:	4299      	cmp	r1, r3
 8003ab8:	bfde      	ittt	le
 8003aba:	2330      	movle	r3, #48	; 0x30
 8003abc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ac0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ac4:	1b52      	subs	r2, r2, r5
 8003ac6:	6122      	str	r2, [r4, #16]
 8003ac8:	f8cd a000 	str.w	sl, [sp]
 8003acc:	464b      	mov	r3, r9
 8003ace:	aa03      	add	r2, sp, #12
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	f7ff fee2 	bl	800389c <_printf_common>
 8003ad8:	3001      	adds	r0, #1
 8003ada:	d14c      	bne.n	8003b76 <_printf_i+0x1fe>
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	b004      	add	sp, #16
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ae6:	4835      	ldr	r0, [pc, #212]	; (8003bbc <_printf_i+0x244>)
 8003ae8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aec:	6829      	ldr	r1, [r5, #0]
 8003aee:	6823      	ldr	r3, [r4, #0]
 8003af0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003af4:	6029      	str	r1, [r5, #0]
 8003af6:	061d      	lsls	r5, r3, #24
 8003af8:	d514      	bpl.n	8003b24 <_printf_i+0x1ac>
 8003afa:	07df      	lsls	r7, r3, #31
 8003afc:	bf44      	itt	mi
 8003afe:	f043 0320 	orrmi.w	r3, r3, #32
 8003b02:	6023      	strmi	r3, [r4, #0]
 8003b04:	b91e      	cbnz	r6, 8003b0e <_printf_i+0x196>
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	f023 0320 	bic.w	r3, r3, #32
 8003b0c:	6023      	str	r3, [r4, #0]
 8003b0e:	2310      	movs	r3, #16
 8003b10:	e7b0      	b.n	8003a74 <_printf_i+0xfc>
 8003b12:	6823      	ldr	r3, [r4, #0]
 8003b14:	f043 0320 	orr.w	r3, r3, #32
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	2378      	movs	r3, #120	; 0x78
 8003b1c:	4828      	ldr	r0, [pc, #160]	; (8003bc0 <_printf_i+0x248>)
 8003b1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b22:	e7e3      	b.n	8003aec <_printf_i+0x174>
 8003b24:	0659      	lsls	r1, r3, #25
 8003b26:	bf48      	it	mi
 8003b28:	b2b6      	uxthmi	r6, r6
 8003b2a:	e7e6      	b.n	8003afa <_printf_i+0x182>
 8003b2c:	4615      	mov	r5, r2
 8003b2e:	e7bb      	b.n	8003aa8 <_printf_i+0x130>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	6826      	ldr	r6, [r4, #0]
 8003b34:	6961      	ldr	r1, [r4, #20]
 8003b36:	1d18      	adds	r0, r3, #4
 8003b38:	6028      	str	r0, [r5, #0]
 8003b3a:	0635      	lsls	r5, r6, #24
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0x1cc>
 8003b40:	6019      	str	r1, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <_printf_i+0x1d2>
 8003b44:	0670      	lsls	r0, r6, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0x1c8>
 8003b48:	8019      	strh	r1, [r3, #0]
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6123      	str	r3, [r4, #16]
 8003b4e:	4615      	mov	r5, r2
 8003b50:	e7ba      	b.n	8003ac8 <_printf_i+0x150>
 8003b52:	682b      	ldr	r3, [r5, #0]
 8003b54:	1d1a      	adds	r2, r3, #4
 8003b56:	602a      	str	r2, [r5, #0]
 8003b58:	681d      	ldr	r5, [r3, #0]
 8003b5a:	6862      	ldr	r2, [r4, #4]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4628      	mov	r0, r5
 8003b60:	f7fc fb5e 	bl	8000220 <memchr>
 8003b64:	b108      	cbz	r0, 8003b6a <_printf_i+0x1f2>
 8003b66:	1b40      	subs	r0, r0, r5
 8003b68:	6060      	str	r0, [r4, #4]
 8003b6a:	6863      	ldr	r3, [r4, #4]
 8003b6c:	6123      	str	r3, [r4, #16]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b74:	e7a8      	b.n	8003ac8 <_printf_i+0x150>
 8003b76:	6923      	ldr	r3, [r4, #16]
 8003b78:	462a      	mov	r2, r5
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	47d0      	blx	sl
 8003b80:	3001      	adds	r0, #1
 8003b82:	d0ab      	beq.n	8003adc <_printf_i+0x164>
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	079b      	lsls	r3, r3, #30
 8003b88:	d413      	bmi.n	8003bb2 <_printf_i+0x23a>
 8003b8a:	68e0      	ldr	r0, [r4, #12]
 8003b8c:	9b03      	ldr	r3, [sp, #12]
 8003b8e:	4298      	cmp	r0, r3
 8003b90:	bfb8      	it	lt
 8003b92:	4618      	movlt	r0, r3
 8003b94:	e7a4      	b.n	8003ae0 <_printf_i+0x168>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4632      	mov	r2, r6
 8003b9a:	4649      	mov	r1, r9
 8003b9c:	4640      	mov	r0, r8
 8003b9e:	47d0      	blx	sl
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d09b      	beq.n	8003adc <_printf_i+0x164>
 8003ba4:	3501      	adds	r5, #1
 8003ba6:	68e3      	ldr	r3, [r4, #12]
 8003ba8:	9903      	ldr	r1, [sp, #12]
 8003baa:	1a5b      	subs	r3, r3, r1
 8003bac:	42ab      	cmp	r3, r5
 8003bae:	dcf2      	bgt.n	8003b96 <_printf_i+0x21e>
 8003bb0:	e7eb      	b.n	8003b8a <_printf_i+0x212>
 8003bb2:	2500      	movs	r5, #0
 8003bb4:	f104 0619 	add.w	r6, r4, #25
 8003bb8:	e7f5      	b.n	8003ba6 <_printf_i+0x22e>
 8003bba:	bf00      	nop
 8003bbc:	080040d2 	.word	0x080040d2
 8003bc0:	080040e3 	.word	0x080040e3

08003bc4 <memcpy>:
 8003bc4:	440a      	add	r2, r1
 8003bc6:	4291      	cmp	r1, r2
 8003bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003bcc:	d100      	bne.n	8003bd0 <memcpy+0xc>
 8003bce:	4770      	bx	lr
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bda:	4291      	cmp	r1, r2
 8003bdc:	d1f9      	bne.n	8003bd2 <memcpy+0xe>
 8003bde:	bd10      	pop	{r4, pc}

08003be0 <memmove>:
 8003be0:	4288      	cmp	r0, r1
 8003be2:	b510      	push	{r4, lr}
 8003be4:	eb01 0402 	add.w	r4, r1, r2
 8003be8:	d902      	bls.n	8003bf0 <memmove+0x10>
 8003bea:	4284      	cmp	r4, r0
 8003bec:	4623      	mov	r3, r4
 8003bee:	d807      	bhi.n	8003c00 <memmove+0x20>
 8003bf0:	1e43      	subs	r3, r0, #1
 8003bf2:	42a1      	cmp	r1, r4
 8003bf4:	d008      	beq.n	8003c08 <memmove+0x28>
 8003bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bfa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bfe:	e7f8      	b.n	8003bf2 <memmove+0x12>
 8003c00:	4402      	add	r2, r0
 8003c02:	4601      	mov	r1, r0
 8003c04:	428a      	cmp	r2, r1
 8003c06:	d100      	bne.n	8003c0a <memmove+0x2a>
 8003c08:	bd10      	pop	{r4, pc}
 8003c0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c12:	e7f7      	b.n	8003c04 <memmove+0x24>

08003c14 <_free_r>:
 8003c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c16:	2900      	cmp	r1, #0
 8003c18:	d044      	beq.n	8003ca4 <_free_r+0x90>
 8003c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c1e:	9001      	str	r0, [sp, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f1a1 0404 	sub.w	r4, r1, #4
 8003c26:	bfb8      	it	lt
 8003c28:	18e4      	addlt	r4, r4, r3
 8003c2a:	f000 f913 	bl	8003e54 <__malloc_lock>
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	; (8003ca8 <_free_r+0x94>)
 8003c30:	9801      	ldr	r0, [sp, #4]
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	b933      	cbnz	r3, 8003c44 <_free_r+0x30>
 8003c36:	6063      	str	r3, [r4, #4]
 8003c38:	6014      	str	r4, [r2, #0]
 8003c3a:	b003      	add	sp, #12
 8003c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003c40:	f000 b90e 	b.w	8003e60 <__malloc_unlock>
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	d908      	bls.n	8003c5a <_free_r+0x46>
 8003c48:	6825      	ldr	r5, [r4, #0]
 8003c4a:	1961      	adds	r1, r4, r5
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	bf01      	itttt	eq
 8003c50:	6819      	ldreq	r1, [r3, #0]
 8003c52:	685b      	ldreq	r3, [r3, #4]
 8003c54:	1949      	addeq	r1, r1, r5
 8003c56:	6021      	streq	r1, [r4, #0]
 8003c58:	e7ed      	b.n	8003c36 <_free_r+0x22>
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	b10b      	cbz	r3, 8003c64 <_free_r+0x50>
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	d9fa      	bls.n	8003c5a <_free_r+0x46>
 8003c64:	6811      	ldr	r1, [r2, #0]
 8003c66:	1855      	adds	r5, r2, r1
 8003c68:	42a5      	cmp	r5, r4
 8003c6a:	d10b      	bne.n	8003c84 <_free_r+0x70>
 8003c6c:	6824      	ldr	r4, [r4, #0]
 8003c6e:	4421      	add	r1, r4
 8003c70:	1854      	adds	r4, r2, r1
 8003c72:	42a3      	cmp	r3, r4
 8003c74:	6011      	str	r1, [r2, #0]
 8003c76:	d1e0      	bne.n	8003c3a <_free_r+0x26>
 8003c78:	681c      	ldr	r4, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	6053      	str	r3, [r2, #4]
 8003c7e:	4421      	add	r1, r4
 8003c80:	6011      	str	r1, [r2, #0]
 8003c82:	e7da      	b.n	8003c3a <_free_r+0x26>
 8003c84:	d902      	bls.n	8003c8c <_free_r+0x78>
 8003c86:	230c      	movs	r3, #12
 8003c88:	6003      	str	r3, [r0, #0]
 8003c8a:	e7d6      	b.n	8003c3a <_free_r+0x26>
 8003c8c:	6825      	ldr	r5, [r4, #0]
 8003c8e:	1961      	adds	r1, r4, r5
 8003c90:	428b      	cmp	r3, r1
 8003c92:	bf04      	itt	eq
 8003c94:	6819      	ldreq	r1, [r3, #0]
 8003c96:	685b      	ldreq	r3, [r3, #4]
 8003c98:	6063      	str	r3, [r4, #4]
 8003c9a:	bf04      	itt	eq
 8003c9c:	1949      	addeq	r1, r1, r5
 8003c9e:	6021      	streq	r1, [r4, #0]
 8003ca0:	6054      	str	r4, [r2, #4]
 8003ca2:	e7ca      	b.n	8003c3a <_free_r+0x26>
 8003ca4:	b003      	add	sp, #12
 8003ca6:	bd30      	pop	{r4, r5, pc}
 8003ca8:	200002c0 	.word	0x200002c0

08003cac <sbrk_aligned>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	4e0e      	ldr	r6, [pc, #56]	; (8003ce8 <sbrk_aligned+0x3c>)
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	6831      	ldr	r1, [r6, #0]
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	b911      	cbnz	r1, 8003cbe <sbrk_aligned+0x12>
 8003cb8:	f000 f8bc 	bl	8003e34 <_sbrk_r>
 8003cbc:	6030      	str	r0, [r6, #0]
 8003cbe:	4621      	mov	r1, r4
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f000 f8b7 	bl	8003e34 <_sbrk_r>
 8003cc6:	1c43      	adds	r3, r0, #1
 8003cc8:	d00a      	beq.n	8003ce0 <sbrk_aligned+0x34>
 8003cca:	1cc4      	adds	r4, r0, #3
 8003ccc:	f024 0403 	bic.w	r4, r4, #3
 8003cd0:	42a0      	cmp	r0, r4
 8003cd2:	d007      	beq.n	8003ce4 <sbrk_aligned+0x38>
 8003cd4:	1a21      	subs	r1, r4, r0
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f000 f8ac 	bl	8003e34 <_sbrk_r>
 8003cdc:	3001      	adds	r0, #1
 8003cde:	d101      	bne.n	8003ce4 <sbrk_aligned+0x38>
 8003ce0:	f04f 34ff 	mov.w	r4, #4294967295
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	bd70      	pop	{r4, r5, r6, pc}
 8003ce8:	200002c4 	.word	0x200002c4

08003cec <_malloc_r>:
 8003cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cf0:	1ccd      	adds	r5, r1, #3
 8003cf2:	f025 0503 	bic.w	r5, r5, #3
 8003cf6:	3508      	adds	r5, #8
 8003cf8:	2d0c      	cmp	r5, #12
 8003cfa:	bf38      	it	cc
 8003cfc:	250c      	movcc	r5, #12
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	4607      	mov	r7, r0
 8003d02:	db01      	blt.n	8003d08 <_malloc_r+0x1c>
 8003d04:	42a9      	cmp	r1, r5
 8003d06:	d905      	bls.n	8003d14 <_malloc_r+0x28>
 8003d08:	230c      	movs	r3, #12
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	2600      	movs	r6, #0
 8003d0e:	4630      	mov	r0, r6
 8003d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d14:	4e2e      	ldr	r6, [pc, #184]	; (8003dd0 <_malloc_r+0xe4>)
 8003d16:	f000 f89d 	bl	8003e54 <__malloc_lock>
 8003d1a:	6833      	ldr	r3, [r6, #0]
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	bb34      	cbnz	r4, 8003d6e <_malloc_r+0x82>
 8003d20:	4629      	mov	r1, r5
 8003d22:	4638      	mov	r0, r7
 8003d24:	f7ff ffc2 	bl	8003cac <sbrk_aligned>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	d14d      	bne.n	8003dca <_malloc_r+0xde>
 8003d2e:	6834      	ldr	r4, [r6, #0]
 8003d30:	4626      	mov	r6, r4
 8003d32:	2e00      	cmp	r6, #0
 8003d34:	d140      	bne.n	8003db8 <_malloc_r+0xcc>
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	4631      	mov	r1, r6
 8003d3a:	4638      	mov	r0, r7
 8003d3c:	eb04 0803 	add.w	r8, r4, r3
 8003d40:	f000 f878 	bl	8003e34 <_sbrk_r>
 8003d44:	4580      	cmp	r8, r0
 8003d46:	d13a      	bne.n	8003dbe <_malloc_r+0xd2>
 8003d48:	6821      	ldr	r1, [r4, #0]
 8003d4a:	3503      	adds	r5, #3
 8003d4c:	1a6d      	subs	r5, r5, r1
 8003d4e:	f025 0503 	bic.w	r5, r5, #3
 8003d52:	3508      	adds	r5, #8
 8003d54:	2d0c      	cmp	r5, #12
 8003d56:	bf38      	it	cc
 8003d58:	250c      	movcc	r5, #12
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff ffa5 	bl	8003cac <sbrk_aligned>
 8003d62:	3001      	adds	r0, #1
 8003d64:	d02b      	beq.n	8003dbe <_malloc_r+0xd2>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	442b      	add	r3, r5
 8003d6a:	6023      	str	r3, [r4, #0]
 8003d6c:	e00e      	b.n	8003d8c <_malloc_r+0xa0>
 8003d6e:	6822      	ldr	r2, [r4, #0]
 8003d70:	1b52      	subs	r2, r2, r5
 8003d72:	d41e      	bmi.n	8003db2 <_malloc_r+0xc6>
 8003d74:	2a0b      	cmp	r2, #11
 8003d76:	d916      	bls.n	8003da6 <_malloc_r+0xba>
 8003d78:	1961      	adds	r1, r4, r5
 8003d7a:	42a3      	cmp	r3, r4
 8003d7c:	6025      	str	r5, [r4, #0]
 8003d7e:	bf18      	it	ne
 8003d80:	6059      	strne	r1, [r3, #4]
 8003d82:	6863      	ldr	r3, [r4, #4]
 8003d84:	bf08      	it	eq
 8003d86:	6031      	streq	r1, [r6, #0]
 8003d88:	5162      	str	r2, [r4, r5]
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	4638      	mov	r0, r7
 8003d8e:	f104 060b 	add.w	r6, r4, #11
 8003d92:	f000 f865 	bl	8003e60 <__malloc_unlock>
 8003d96:	f026 0607 	bic.w	r6, r6, #7
 8003d9a:	1d23      	adds	r3, r4, #4
 8003d9c:	1af2      	subs	r2, r6, r3
 8003d9e:	d0b6      	beq.n	8003d0e <_malloc_r+0x22>
 8003da0:	1b9b      	subs	r3, r3, r6
 8003da2:	50a3      	str	r3, [r4, r2]
 8003da4:	e7b3      	b.n	8003d0e <_malloc_r+0x22>
 8003da6:	6862      	ldr	r2, [r4, #4]
 8003da8:	42a3      	cmp	r3, r4
 8003daa:	bf0c      	ite	eq
 8003dac:	6032      	streq	r2, [r6, #0]
 8003dae:	605a      	strne	r2, [r3, #4]
 8003db0:	e7ec      	b.n	8003d8c <_malloc_r+0xa0>
 8003db2:	4623      	mov	r3, r4
 8003db4:	6864      	ldr	r4, [r4, #4]
 8003db6:	e7b2      	b.n	8003d1e <_malloc_r+0x32>
 8003db8:	4634      	mov	r4, r6
 8003dba:	6876      	ldr	r6, [r6, #4]
 8003dbc:	e7b9      	b.n	8003d32 <_malloc_r+0x46>
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	603b      	str	r3, [r7, #0]
 8003dc2:	4638      	mov	r0, r7
 8003dc4:	f000 f84c 	bl	8003e60 <__malloc_unlock>
 8003dc8:	e7a1      	b.n	8003d0e <_malloc_r+0x22>
 8003dca:	6025      	str	r5, [r4, #0]
 8003dcc:	e7de      	b.n	8003d8c <_malloc_r+0xa0>
 8003dce:	bf00      	nop
 8003dd0:	200002c0 	.word	0x200002c0

08003dd4 <_realloc_r>:
 8003dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd8:	4680      	mov	r8, r0
 8003dda:	4614      	mov	r4, r2
 8003ddc:	460e      	mov	r6, r1
 8003dde:	b921      	cbnz	r1, 8003dea <_realloc_r+0x16>
 8003de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003de4:	4611      	mov	r1, r2
 8003de6:	f7ff bf81 	b.w	8003cec <_malloc_r>
 8003dea:	b92a      	cbnz	r2, 8003df8 <_realloc_r+0x24>
 8003dec:	f7ff ff12 	bl	8003c14 <_free_r>
 8003df0:	4625      	mov	r5, r4
 8003df2:	4628      	mov	r0, r5
 8003df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df8:	f000 f838 	bl	8003e6c <_malloc_usable_size_r>
 8003dfc:	4284      	cmp	r4, r0
 8003dfe:	4607      	mov	r7, r0
 8003e00:	d802      	bhi.n	8003e08 <_realloc_r+0x34>
 8003e02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e06:	d812      	bhi.n	8003e2e <_realloc_r+0x5a>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	f7ff ff6e 	bl	8003cec <_malloc_r>
 8003e10:	4605      	mov	r5, r0
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d0ed      	beq.n	8003df2 <_realloc_r+0x1e>
 8003e16:	42bc      	cmp	r4, r7
 8003e18:	4622      	mov	r2, r4
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	bf28      	it	cs
 8003e1e:	463a      	movcs	r2, r7
 8003e20:	f7ff fed0 	bl	8003bc4 <memcpy>
 8003e24:	4631      	mov	r1, r6
 8003e26:	4640      	mov	r0, r8
 8003e28:	f7ff fef4 	bl	8003c14 <_free_r>
 8003e2c:	e7e1      	b.n	8003df2 <_realloc_r+0x1e>
 8003e2e:	4635      	mov	r5, r6
 8003e30:	e7df      	b.n	8003df2 <_realloc_r+0x1e>
	...

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	; (8003e50 <_sbrk_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fd f834 	bl	8000eac <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	200002c8 	.word	0x200002c8

08003e54 <__malloc_lock>:
 8003e54:	4801      	ldr	r0, [pc, #4]	; (8003e5c <__malloc_lock+0x8>)
 8003e56:	f000 b811 	b.w	8003e7c <__retarget_lock_acquire_recursive>
 8003e5a:	bf00      	nop
 8003e5c:	200002cc 	.word	0x200002cc

08003e60 <__malloc_unlock>:
 8003e60:	4801      	ldr	r0, [pc, #4]	; (8003e68 <__malloc_unlock+0x8>)
 8003e62:	f000 b80c 	b.w	8003e7e <__retarget_lock_release_recursive>
 8003e66:	bf00      	nop
 8003e68:	200002cc 	.word	0x200002cc

08003e6c <_malloc_usable_size_r>:
 8003e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e70:	1f18      	subs	r0, r3, #4
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bfbc      	itt	lt
 8003e76:	580b      	ldrlt	r3, [r1, r0]
 8003e78:	18c0      	addlt	r0, r0, r3
 8003e7a:	4770      	bx	lr

08003e7c <__retarget_lock_acquire_recursive>:
 8003e7c:	4770      	bx	lr

08003e7e <__retarget_lock_release_recursive>:
 8003e7e:	4770      	bx	lr

08003e80 <_init>:
 8003e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e82:	bf00      	nop
 8003e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e86:	bc08      	pop	{r3}
 8003e88:	469e      	mov	lr, r3
 8003e8a:	4770      	bx	lr

08003e8c <_fini>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	bf00      	nop
 8003e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e92:	bc08      	pop	{r3}
 8003e94:	469e      	mov	lr, r3
 8003e96:	4770      	bx	lr
